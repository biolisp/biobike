

                     BIOBIKE SYSTEM INSTALLATION GUIDE


I. GENERAL INTRODUCTION.  


Installing Biobike requires you to download various software and data.
Biobike is best installed such that everything is stored under a
single root directory.  (It is possible to install Biobike with its
various components in independent directories, but it is not
recommended and we don't go into any detail on how to do that here.)

The components of Biobike include:

  -- The source code.  This code is obtained using CVS from the
BioLingua/Biolisp project on Sourceforge.

  -- Biobike external software tools.  These are things like BLAST
and MEME.  They are generally Unix C programs and so are not
installable on Windows (and, in fact, the Biobike software would not
know how to execute these programs on Windows in any case -- see note
at end of section below).

  -- Biological knowledge base files.  These are obtainable from
the site that hosts the Biobike project, a machine called Nostoc.  

  -- Organism data files.  These are also obtainable from Nostoc,
assuming you want to study the organisms that Nostoc has data for.
You can also obtain other organism data files from elsewhere or you
can create them yourself.

  -- Biobike user directories (not downloaded).  These directories are
where Biobike users can store their files and where system logs are
kept.

  -- An operating system user login and home directory from which you
will run the Biobike program (not downloaded).  (These are only
conceptually necessary under Unix, unless you have multiple users on
your PC.)

  -- Various temporary directories (not downloaded).  


The locations of these directories, and many other parameters, are
defined in a configuration file.  You will create this configuration
file, using a sample configuration file as a template.  This
configuration file will get loaded before any of the actual Biobike
software is loaded, and so specify to Biobike the configuration of
your site.

The rest of this installation guide is divided into parts; each part
is divided into steps, and the steps are further divided into specific
procedures for Linux and for Windows.  Some of the parts will only
apply to Windows or to Linux, as will some of the steps.

Note: The full Biobike application currently can only be installed on
Linux systems.  The Biobike source code and various other Biobike
components are installable on Windows; however the point of having the
software available on Windows is mainly for development and debugging,
not so much to run actual analyses.  This could change in the future.


PART A.  DOING THE INITIAL SETUP AND DOWNLOADING THE SOURCE CODE.


1. Making the toplevel directories.   

[Linux]
 
Create a user account to run BioBike, e.g. one named 'biobike'.
Assume henceforth the account's home directory is

/home/biobike

Make sure the directory is readable and writable:

chmod 775 /home/biobike

Create a directory which will contain Biobike user directories:

/home/biobike/users/

Create a directory to hold miscellaneous files, in particular the
password file:

/home/biobike/etc/

Create a directory to hold the source code:

/home/biobike/BioLisp/

Create a directory to hold the external software tools:

/home/biobike/biotools/

Note: Some external tools may already be installed on your machine, or
you may wish to install them in a more globally accessible place.
This should not be a problem; simply create symbolic links from the
above directory to the external executables.

Also, some of the external tools have configuration variables which
specify where the executables live.  These can take the place of
symbolic links.

Create a directory to hold miscellaneous files and underneath it, data
files:

/home/biobike/bioetc/
/home/biobike/bioetc/data/

Create a directory to hold temporary files generated by BioBike which
are meant to be viewed with a browser:

/home/biobike/webtmp/

Create a directory to hold random temporary files generated by BioBike:

/home/biobike/tmp/

Note that Unix is CASE-SENSITIVE!!  Typing 'biolisp' is NOT the same
as typing 'BioLisp' or 'Biolisp'.  Unfortunately, much of the Biobike
source directory structure is a mishmash of capitalized and lowercase
names.  Caveat emptor.


[Windows]

Make a directory structure where the code will live.  As our example we 
will use

C:\Biobike

as the toplevel directory. Make subdirectories (Note that these names
are parameterizable but the ones listed here are suggested):
     etc
     tmp
     users
     webtmp
     BioLisp
     bioetc
     bioetc/data
     biotmp
     biotools

Note: For tortoisecvs, the directory that is the toplevel for 
the files that you will download from sourceforge is the BioLisp
subdirectory above, NOT the toplevel C:/Biobike directory.  


2. Installing Allegro Lisp

We will not cover this step in detail, we assume you or someone has
either already installed Allegro or knows how to do it.  We will note
that, as far as we know, Biobike will NOT run using the free version
of Allegro; it is too big.  You must have a commercial version.  To do
a full installation you must currently have an Enterprise license
which allows you to access MYSQL from Allegro. However, unless you
need access to the static crossblast information that is stored in
the MYSQL database, no other Biobike data is stored in the database;
therefore you could get away with the Professional Edition instead of
the Enterprise edition.

Allegro executables come in various flavors; currently we use the
alisp8 executable on Linux and allegro-ansi.exe on Windows, but
any executable except those that begin with the letter 'm' (e.g.
mlisp8.exe) should work.

[Windows]

Generally, Allegro will have been installed in C:/Program Files/acl81

[Unix]

Allegro will have been installed wherever the installer put it,
perhaps /usr/local/acl82.64/ -- you will need to locate it.


3. Symbolic link creation (Unix only) 

[Unix]

Since Unix is case-sensitive and one can never remember what case
one uses in naming directories, we suggest using symbolic links
to partially remedy this plague.  For instance you can do 
the following:

	cd /home/biobike/
	ln -s BioLisp biolisp
        ln -s BioLisp Biolisp

so that you can refer to the BioBike source files directory using
any reasonable case permutation.  You may wish to do this
for other directories as well.  

Note: Unix does not appear to be case sensitive when run on a Mac!
Note: The symbolic link syntax and possibily semantics seems different
on Mac Unix than Linux.


4. Downloading the source code using CVS, modifying it and submitting
it back to the system source repository.

One can anonymously download the Biobike source using CVS from
Sourceforge at http://sourceforge.net/projects/biolingua/.  The
instructions can be found by going to this page and clicking on the
'CVS' link.  Here are the Unix shell commands:


cd /home/biobike/

cvs -d:pserver:anonymous@biolingua.cvs.sourceforge.net:/cvsroot/biolingua login

(hit Enter when asked for a password)
 
cvs -z3 -d:pserver:anonymous@biolingua.cvs.sourceforge.net:/cvsroot/biolingua co -P BioLisp

However, to do more than that (ie, if you will be modifying source
files and checking them back in), you will need to have developer
status and a login and password for Sourceforge.  Jeff Shrager will be
able to give you developer status once you have a Sourceforge login.

[Windows]

You probably want to use Tortoise CVS.  Tortoise CVS allows one to do
CVS commands using Windows style menus and it hooks itself into the
file system.  It is way cool.

To download the source for the first time you will use the 'CVS ->
Make new module' Tortoise CVS command in the context of the BioLisp
directory.

(You will need to have an account on sourceforge.  You will need to be
set up as a developer if you want to make changes to the source for
the BioLingua project on Sourceforge.  JP Massar or Jeff Shrager can
give you developer status.)

Q. How do I set up Tortoise CVS to access BioLingua on SourceForge?  

A. Once you have Tortoise CVS downloaded and installed (google it),
you should make a directory called BioLisp below the top-level
directory you've set up above under C:/ (note that the exact
capitalization here is important).

Click right on the BioLisp directory and choose CVS -> Make New Module 
This will bring up a form to fill in.  

The CVS root should look something like 

:ext:roton@biolingua.cvs.sourceforge.net:/cvsroot/biolingua

where 'roton' is replaced by your login on Sourceforge

The protocol should be 'Secure shell (:ext:)' 

Note: Jeff Elhai needed to make the protocol be :ssh circa Sep. 2010

The server should be biolingua.cvs.sourceforge.net

The repository folder should be /cvsroot/biolingua

User name should be your own login name on Sourceforge.

Module should be BioLisp

Once everything is filled in, click on OK.  This should cause Tortoise
to initiate a CVS checkout of all the BioLingua source code.  It will
ask you for your password incessantly.  To fix this, click right on
the BioLisp directory folder and select CVS -> Preferences -> Tools

Under SSH parameters, you can put -pw &lt;password&gt;
(replace &lt;password&gt; with your sourceforge password)

Under External diff application, we recommend that you get the
ExamDiff (http://www.prestosoft.com/edp_examdiff.asp) program and install 
it and then put C:\Program Files\ExamDiff\ExamDiff.exe in that field.

Consult the Tortoise CVS online documentation and tutorial for more
instructions on how to actually use Tortoise CVS.


[Unix]

To deal with CVS in a reasonable manner on Unix it is best to 
create some aliases in your .bashrc file that abbreviate
the common commands you will be using -- Commit, Update, and Checkout.

Create appropriate aliases in your .bashrc file by modifying these
examples (change the directories into which the cvsupdate and
cvscommit commands cd into, and changing 'roton' to be whatever your
Sourceforge username is) and placing them in your .bashrc:

Note:  You MUST have the 

export CVS_RSH=ssh

command!
------------------------------------------------------------------------

export CVS_RSH=ssh

alias update="cvs -d :ext:roton@biolingua.cvs.sourceforge.net:/cvsroot/biolingua update -dP BioLisp"

alias cvscheckout="echo REMEMBER TO CHMOD DIRECTORY ; cvs -d :ext:roton@biolingua.cvs.sf.net:/cvsroot/biolingua co BioLisp"

alias cvsupdate="cd /home/biobike/ ; cvs -d :ext:roton@biolingua.cvs.sourceforge.net:/cvsroot/biolingua update -dP BioLisp"

alias cvsadd="cvs -d :ext:roton@biolingua.cvs.sourceforge.net:/cvsroot/biolingua add"

alias cvscommit="cd /home/biobike/BioLisp/; cvs -d :ext:roton@biolingua.cvs.sourceforge.net:/cvsroot/biolingua commit"

------------------------------------------------------------------------

Note: If you use csh instead of bash, use 'setenv CVS_RSH ssh' instead of
export.  

To download the source for the first time, use your newly-created
cvscheckout alias, first cd'ing to the directory above where you want
the BioBike source to be (here /home/biobike/)

To do an update, you should be able to use your cvsupdate alias from
anywhere, since it first does a 'cd' command to the proper directory.

To do a commit, you should be able to use your cvscommit alias from
anywhere, since it first does a 'cd' to the propery directory.

To do an add, you should be in the directory which contains the file
to be added.

Note that when you do a checkout and get a completely new version of
the source code, the permissions will be screwed up so that only you
are able to write into the subdirectories of the source directory.
(This means that anyone else who tries to compile/load the system will
fail miserably because they will not be able to create .fasl files.)

We suggest that you do the following after a cvscheckout (change
directories to the directory above the BioBike source directory,
and then recursively chmod the BioBike source hierarchy), e.g.:

cd /home/biobike/ 
chmod -R ug+w,o+X BioLisp

This will make all files group writeable, and make all directories
accessible to everyone.  


PART B.  DEALING WITH BIOBIKE'S CONFIGURATION FILE AND COMPILE-LOADING
THE SOFTWARE.


1.  Getting nitty-gritty with the config file

[Windows & Unix]

Find your BioLisp subdirectory, and copy the sample-config.lisp file
to your toplevel directory and rename it simply config.lisp.  (We
suggest merely copying it, and then changing the name, thus preserving
a sample-config file on your computer.)

cp /home/biobike/BioLisp/sample-config.lisp /home/biobike/config.lisp

Edit the file appropriately...this will involve going through each
parameter setting and changing it appropriately according to the
directory structure you have set up for Biobike.

[Unix]

If you have followed the instructions so far, you can leave this
statement near the top of the config file:

(push :root-directory-mode *features*)

alone.  This will save you from having to change any of the directory
paths.  If you do change the root directory from /home/biobike/ then
in terms of directory path changes all you should have to do is change
the value of

*INSTANCE-HOME-DIRECTORY*

appropriately.  


[Windows]

If you have followed the instructions so far, you can leave this
statement near the top of the config file:

(push :root-directory-mode *features*)

alone.  However, you will have to change the value of 

*INSTANCE-HOME-DIRECTORY*

to C:\Biobike.  (If you put the installation files somewhere else,
then change the value of this variable to reflect that.) 


[Windows & Unix]

The default values and documentation strings for the configuration
parameters are stored in the files:

.../Biolisp/Webconfig/configuration.lisp

  (These parameters deal with the Weblistener, which is the infrastructure
   which the BioBike application uses)

.../Biolisp/Biodefs/configuration.lisp

  (These parameters deal specifically with BioBike)

You may wish to consult these files if it is not obvious what the
proper value of a particular configuration variable should be.

Also change the output text (lines that begin with '(format t ...)')
at the top and bottom of your config file to identify your particular
site: e.g., at VCU we would change the string at the top to contain:

    "... the VCU Weblistener configuration ..."

Finally, insert into the config.lisp file (near the top) the following
two lines if they are not already there, or change them appropriately to be
:BIOLINGUA

    (setq *application* :biolingua)
    (setq *application-instance* :biolingua)

1a: Apache

BioBike relies on Apache (or some other general-pupose webserver) to 
serve static information like manual pages and the output of programs
that generate graphics (such as gnuplot).  

The details of configuring and starting Apache are beyond the scope of
this document, but note that there are several variables in
.../Webconfig/configuration.lisp that need to be set up so that Lisp can
interact with Apache properly.  These include:

 *host-machine-apache-url*
 *webtmp-directory*
 *webtmp-url* 

[Unix]

The *webtmp-directory* is tricky.  The way we do it is to have
*webtmp-directory* point to a subdirectory of the installation
directory called webtmp (you were instructed to create this
subdirectory in step 1).  Then we set up a symbolic link from a
directory that is served by Apache to this webtmp subdirectory.  That
way, knowing the proper URL, someone can access files in that
directory from any web browswer.

This is also the way we make the files in the .../BioLisp/Doc/
directory available to the outside world, (i.e for those not using the
Biobike Weblistener).  We make a symbolic link from the directory
served by Apache to our Doc directory.

So if the directory served by apache is /www/, then doing:

cd /www/ 
ln -s /home/biobike/BioLisp/Doc/ biobike-doc

would be the magic incantation (of course, you need the necessary
permissions to do this).  After doing this, if your machine was web
accessible using the toplevel url mymachine.myplace.org then you could
access the main documentation page in our Doc directory using the
URL:

mymachine.myplace.org/biobike-doc/index.html

On the edwards machine at SDSU, the biobike machine at vcu, and
the nostoc machine at stanford, the directory served by apache
is found at

/var/www/html/

This seems to be the standard place but your mileage may vary.  

[Windows]

Generally you won't be accessing files on your Windows machine from
the outside, and you probably aren't running Apache on your machine.  
So these configuration variables are not important.  

2. Making Lisp start up correctly, part 1

[Windows] 

When Allegro starts up it, it automatically reads files that tell it
to do certain things.  Our goal in this step is to find one of those
files and add to it instructions to load our newly edited
configuration file.

Here is a fairly simple procedure if you do not already have a
clinit.cl file (This is an initialization file for Allegro).

First, you need to create your clinit.cl file.  You can create it
anywhere, but we suggest you create it in your Biobike home
directory, C:/Biobike/clinit.cl.

Use Wordpad or the Allegro GUI editor, whichever you feel comfortable
with, to create this new file, and copy the following code into it:

(in-package :cl-user)
(format t "Loading ~A" *load-pathname*)	
(lisp:load "C:/Biobike/config.lisp")

(when (not (fboundp 'force-all))
  (defun force-all (&key (undo nil))
    (format t "~&;; Control variables: ~A,~A~%" 
      'cl-user::*force-requires-reload*
      'cl-user::*force-load-system*-recompile*
      )
    (if (not undo)
        (progn
          (set 'cl-user::*force-requires-reload* t)
          (set 'cl-user::*force-load-system*-recompile* t)
          (format t ";; REQUIRES will always reload module file now.~%")
          (format t ";; LOAD-SYSTEM* will recompile all component files.~%"))
      (progn
        (set 'cl-user::*force-requires-reload* nil)
        (set 'cl-user::*force-load-system*-recompile* nil)
        (format t ";; REQUIRES won't reload module file if already loaded.")
        (format t ";; LOAD-SYSTEM* won't recompile files unless necessary.")
        ))))

Note that the third line loads the config.lisp file, so insert the
correct pathname, but keep the double quotes, and use forward slashes.

Moving on, look in Allegro's main directory, probably something like 
	
C:\Program Files\acl82

;;; Jeff (20070523) Notes that the follwing will change ACL to 
;;; load the biobike account's clinit.cl for EVERY user who starts
;;; lisp, and this probably isn't what was intended (unless there's 
;;; really just one server and that the only lisp user on the machine!)
;;; (Maybe this is in fact generally the case for Windows machines, but
;;; one should be aware that this changes all uses of ACL to load the same
;;; clinit.cl)

Once in this directory you're looking for a file called siteinit.cl.
Edit that file, and in it you'll probably see just a couple lines of
code (If this file does not exist, you can create it).

At the end of the file, insert the following code:
   
(format t "~%;; Loading siteinit.cl from acl directory...~%")
(load "C:/Biobike/clinit.cl")

Note that the second line loads the clinit.cl file (which you just
created), so insert the correct pathname, but keep the double quotes,
and use forward slashes.

If you already have a clinit.cl file and you are sure it is being
loaded when you start up Allegro, then you should simply add into it
the code we suggest above (which will load the Biobike config file
and define the useful FORCE-ALL utility function).

[Unix]

Under Unix when Allegro Lisp starts up it looks in the home directory
of the user who issued the startup command (recall that this user will
not generally be you, specifically, but rather the user login you set
up to run Biobike).  Therefore you want to create a clinit.cl file in
that home directory which then loads the configuration file.  This
clinit.cl file will contain exactly the same code as in the Windows
section above, except that the pathname for the load command will be
Unix style, and by default is "/home/biobike/config.lisp".

As with Windows, if you already have a clinit.cl file and you are sure
it is being loaded when you start up Allegro, then you should simply
add into it the code we suggest above.

3. Making Lisp start up correctly, part 2

[General]

The goal of this step is to insure that when your Lisp starts up it
loads your clinit.cl file and the Biobike config.lisp file.

[Unix]

You can run Lisp directly from the shell by invoking the appropriate
executable (e.g., /usr/local/acl82.64/alisp8) and/or you can define a
'lisp' alias in your .bashrc file to abbreviate.

Another way to run the Lisp which gives you a better interface is to
use Emacs and Allegro's Emacs<==>Lisp interface.  There is
documentation about this interface in the Allegro documentation:

http://www.franz.com/support/documentation/8.0/doc/contents.htm#eli

A simple way to get the interface working is to copy the file

/home/jpm/.emacs

on Nostoc and make appropriate modifications to the paths.  The key
pieces of code are:

(load "/usr/local/acl82.64/eli/fi-site-init")

(defun run-common-lisp ()
  (interactive)
  (fi:common-lisp "lisp"
                  "/home/jpm/"
                  "/usr/local/acl82.64/alisp8"
                  nil
                  "localhost"
                  "/usr/local/acl82.64/alisp8.dxl"))

which loads the interface functionality and defines the 

M-x run common lisp 

command which you use to start up a Lisp session.  

Either via the Shell or via Emacs, start up your Lisp.  You should see
the messages that you are printing out in your clinit.cl file and your
configuration file.  If you don't see these messages, something is
wrong (maybe your paths aren't right?).  You can load the config.lisp
file by hand, but this must be fixed before the system can start up
automatically.

[Windows]

Using Windows, Allegro comes with its own editor/GUI.  (You can put
this editor into a 'pseudo-emacs' mode if you want or you can keep it
in a more standard 'notepad-style' edit-mode.)  So typically you will
simply run Biobike from Allegro without a separate Emacs process.

(Note that it is possible to run Allegro under standard emacs or
xemacs.  You would have to install emacs on your PC and follow the
directions in the Allegro documentation for installing their
emacs-lisp interface.  Alternately, you could look at SLIME
(http://common-lisp.net/project/slime/) and/or Lisp in a Box
(http://www.gigamonkeys.com/book/lispbox/), which provide an
alternative emacs/lisp interaction environment.)

Assuming you are using the Allegro GUI interface when you start up
Allegro you need to determine whether your clinit.cl and configuration
files are being loaded.  To do this make sure that you are viewing the
Console, and not the Debug Window.  Click View -> Console or hit Ctrl
+ F9.  If you don't see the messages that get printed out by these
files, then something is wrong. Make sure you are loading the correct
files: Using our recommended setup, the siteinit.cl file in your
Allegro directory loads your clinit.lisp file in your Biobike
directory.  This in turn loads config.lisp, also in your Biobike
directory.  Also remember that the config.lisp file came from the
sample-config.lisp file, whose default values were all in Unix, so
make sure you changed ALL the pathnames, such that they begin with
"C:/Biobike..." or whatever directory you chose.


4. Setting up the Biobike user account file

[Unix]

Copy the sample password file /home/biobike/BioLisp/sample-drowssap.lisp
to the directory designated by the value of user:*password-directory*
in the config.lisp file (/home/biobike/etc/) and rename it
drowssap.lisp:

   cp /home/biobike/BioLisp/sample-drowssap.lisp /home/biobike/etc/drowssap.lisp

Edit the file appropriately to create at least one account that you
can use for yourself to test whether you can log in.

[Windows]

Do as in the Unix instructions above, substituting C:/Biobike 
for /home/biobike.  

5. Compiling and loading the system sources.
	
	
[Unix]
		
First, start up a Lisp (see above).    

Then compile/load the system sources by typing the following set of
commands into the Lisp Listener:

     (force-all)
     (setq cl-user::*biowebserver* nil)	
     (load "/home/biobike/BioLisp/blload.lisp")

[Windows]


First, start up a Lisp (see above).    

Then compile/load the system sources by typing the following set of
commands into the Lisp Listener:

     (in-package :cl-user)
     (force-all)
     (setq cl-user::*biowebserver* nil)	
     (load "C:/Biobike/BioLisp/blload.lisp")

The system should compile without errors.  If it does not finish it's
compile/load but errors out, something is terribly wrong and you will
probably have to contact the Biobike team for help.

[Unix & Windows]

Note: By setting CL-USER::*BIOWEBSERVER* to nil we prevent any attempt
to load the knowledge databases (see below) or any organisms.  Right
now, we just want to get the code to compile and load, not wait around
for all the data in the databases to load.

Note: You should create a function in your clinit.cl file called BLL
that will do the load command above:

[Unix]

(defun bll (&optional frames-and-organisms?)
  (setq *biowebserver* frames-and-organisms?)		
  (load "/home/biobike/BioLisp/blload.lisp"))

[Windows]

(defun bll (&optional frames-and-organisms?)
  (setq *biowebserver* frames-and-organisms?)		
  (load "C:/Biobike/BioLisp/blload.lisp"))

Put the above definition into your clinit.cl file.  We will use this
definition later in the instructions!

Now all you have to do to start up a BioBike for debugging purposes,
after the sources have been successfully compiled, will be to start up
Lisp and type

  (bll)

[Windows note]

The standard Allegro executables start up in the CG-USER package, not
the CL-USER package, which is standard for other Common Lisps.  If you
find yourself in the CG-USER package, then before doing anything else,
you should execute

(in-package :cl-user)

Or an easier way to do this is:

:pa cl-user

Also make sure that your clinit.cl file has 

(in-package :cl-user)

at the top of the file.  If it does not have such a statement, then
the functions defined in it may also be in the cg-user package instead of
the cl-user package.  

6. Starting up the Weblistener and logging into Biobike.

[Windows & Unix]

Once you have successfully compile/loaded the source code, start up
the weblistener:

> (wb:start-weblistener)

This should start AllegroServe, listening on the port your specified
in the config.lisp file (default 8002 on Unix and 8000 on Windows).  A
message to this effect should be printed out.  If not, you are in
trouble and will need to figure out what is wrong or contact the
Biobike team for help.

Note: You can use any port numbers you wish, although port 80 is
generally reserved for the standard webserver running on your machine,
(probably Apache).  It may be the case that on a Unix system you will
have to get your system administrator to allow particular ports to be
accessed from the outside (assuming you will have outside users).

Note: The reason we use port numbers is so that our weblistener can
run without disturbing the standard Apache server.  To access a
particular port on a particular machine, simply add :<port> after the
machine address part of the URL, e.g.:

http://nostoc.stanford.edu:8002/biologin

Note that you may have to use the http:// prefix to get your web browser
to understand the port specification.  

[Windows note]

The name of the machine you are using is irrelevant: you want to
use 'localhost', e.g. 

    http://localhost:8000/biologin

Now try to log on using a login/password from the password file you
set up.  This is done by pointing a browser at a URL composed of the
name of the machine you are running Biobike on with the port you are
running on and /biologin, e.g:

    http://nostoc.stanford.edu:8002/biologin

Try to log in.  If you can't log in you may not have set up the
password file correctly (see above).

PART C.  CUSTOMIZING YOUR INSTALLATION

1. Your installation can be customized (beyond the customization
possible by changing the values of various configuration variables) by
defining methods which override some of the default BioBike behaviors.

This can be done in two ways.  The first involves redefining existing
methods.  This is done by creating a file in the home directory called

biolingua-instance-init.lisp

(Remember case on Unix!) and inserting into this file the appropriate
method redefinitions.

The second involves creating an APPLICATION-INSTANCE class which is a
subclass of the BIOBIKE application.  

(If all this talk of methods and instances is Greek to you, you can
safely ignore it, but you may have to forego customizations or seek
out someone with knowledge of Common Lisp's object system, CLOS. Or
try to muddle through.)

Here we will describe the second method since it is cleaner, if more
involved.

The first step is to edit your config.lisp file and change the value
of the *APPLICATION-INSTANCE* parameter to be something other than
:BIOLINGUA -- something like :BIOVCU, which will serve to uniquely
identify this particular Biobike installation. 

   WARNING: Do *not* change *application*, ONLY change:
   *application-instance*; They are on two lines in config.lisp reading:
      (setq *application* :biolingua)  << DO NOT CHANGE THIS ONE!
      (setq *application-instance* :biolingua)  << ONLY CHANGE THIS ONE!

In the following instructions we will use :BIOVCU as our unique
identifier; you can use anything you like so long as it begins with a
colon and contains only alphabetic characters.	

The next step is to copy the file 

[Unix]

/home/biobike/BioLisp/Biomethods/biolingua.lisp

[Windows]

C:/Biobike/BioLisp/Biomethods/biolingua.lisp

into the home directory and rename it to be 

<unique-identifer>-instance-init.lisp

e.g. 

cp /home/biobike/BioLisp/Biomethods/biolingua.lisp /home/biobike/biovcu-instance-init.lisp

You will then go through the file eliminating methods that you do not
wish to change, and modifying those methods whose behavior you wish to
be different than the default behavior.  For each method that you
modify you will have to also change the method argument list to
associate your modified method with your unique identifier.  e.g.

;; This is the standard method which defines what the user sees
;; at the top of the Biobike login page.  

(defmethod login-header ((app cl-user:biolingua))
  (html
   (:head 
    ((:font :size 6)
     (:center
      (:princ-safe "Welcome to the CIW/NASA BioBike Server (v.4)")
      :br
      (:princ-safe "Cyanobacterial Edition"))))))

;; To change it so that a different header appears:

(defmethod login-header ((app cl-user:biovcu))
  (html
   (:head 
    ((:font :size 6)
     (:center
      (:princ-safe 
        "Welcome to the Virginia Commonwealth University Biobike server")
      :br
      (:princ-safe "Cyanobacterial Edition"))))))

Notice that we have changed cl-user:biolingua in the argument list to 
cl-user:biovcu as well as having changed the header string.  

To make sure that your revised methods file is loaded, we recommend
that you insert the folowing text into your revised
<unique-identifier>-instance-init.lisp file (if it is not already
there) or modify it appropriately (do not include the surrounding
dashes!).  Substitute appropriately for <my-version-of> :

---------------------------------------------------------------------

(cformatt "If you see this the instance-init file for the <my-version-of>") 
(cformatt "Biobike instance is being loaded.")

---------------------------------------------------------------------

The way this works is that at close to the end of the Biobike
startup procedure, the system looks for a file in the home directory
whose name is

<unique-identifier>-instance-init.lisp

If such a file exists, it is loaded.  (If no such file exists, that is
fine.)  Therefore if you start up a Lisp and load in Biobike after
doing this step you should see the above message being printed out
near the end of the load procedure.

[Windows note]

You probably do not need or want an instance-init file specific to
your machine.  The defaults that come with the system should be fine.

If you do want to customize a few things it might be easier simply to
use method 1 above and endure a few redefinition warnings rather than
creating your own application instance.


PART D.  INSTALLING THE BIOBIKE KNOWLEDGE BASES AND ORGANISM DATA

1.  Installation of the Knowledge Databases.

[Unix & Windows]

Biobike currently includes three knowledge bases: the GO Ontology
(GO), The Kyoto Encyclopedia of Genes and Genomes (KEGG), and data
taken from BioCyc which we (probably mistakenly) referred to as
Ocelot, but we're stuck with the name.

Obtain the raw data files for Go, KEGG and Ocelot from Nostoc.  The
best way to obtain these files is for you to have a Unix account on
Nostoc.  Then you can simply use sscp, rcp, sftp, ftp, or something
similar.  (It is also possible to download them using Biobike if you
have a standard account; use Browse Biofiles -> usr/local/bioetc ->
data -> ...)

These are in

     /usr/local/bioetc/data/<dbname>/

where the db names are 'go', 'ocelot', 'kegg'.  

The Go directory consists of two files, only one of which you really need:

godb.lisp file.  

(This .lisp file is computed from the go.xml file in the same
directory.)

The Ocelot directory consists of a single file:

cyano6803base.ocelot.  

KEGG, on the other hand, is a big mess.  The directory consists of
numerous files and subdirectories.  The critically important files
are:

compound
enzyme
glycan
reaction

These are the files which Biobike processes to create knowledge
frames.  Other files consist of KEGG documentation and miscellaneous
stuff, which BioBike does not use.  Biobike can make use of the
files in the gif directory, which are images of molecular structure,
but these are not necessary.

Put these files in the appropriate subdirectories of the 'data'
subdirectory of the directory you defined by the configuration
variable *BIOETC-DIRECTORY*. For instance:

  /home/biobike/bioetc/data/go/
  /home/biobike/bioetc/data/kegg/
  /home/biobike/bioetc/data/ocelot/

The following Unix command can be used to copy a file if you
have an account on Nostoc: 

scp <user>@nostoc.stanford.edu:/usr/local/bioetc/data/kegg/compound .

Once you've copied all the files, start up a lisp and do: 

> (setq *biowebserver* nil)

Load the BioBike software

> (bll)

Now you will load all the knowledge database information into frames
and dump these frames out to disk:

> (in-package :bio)
> (make-kdb-frames :redo? t)

You can exit your Lisp at this point.

From now on, to start up Biobike, all you should need to do is start
up your Lisp and type

> (in-package :cl-user) 
> (bll t)

If you do not want the knowledge frames loaded (because you are just
debugging or don't need them) then just type

> (bll) 

If you want to recompile the system from scratch (e.g., after you
do a CVSupdate) then type 

> (force-all) 

before you type

> (bll)


2.  Installation of organism data.

[Windows and Unix]

To install the standard organism data from Biobike's collection of
organisms, you can get them from Nostoc. There is a compressed tar
file in

     /usr/local/bioetc/data/archives 

that you can FTP.  Use the latest .tar.Z file if there's more than one.

This tar file contains all the files you need for the organisms.  
To install the organisms copy your ftp file to 

     /usr/local/bioetc/data/

cd to that directory, and then do

[Unix]

    uncompress <compressed-tarfile>

    tar -xvf <tarfile> 

This will unarchive the files, creating 13 organism directories whose
names are the names of the 13 organisms.

[Windows] 

Instead of doing the uncompress you can use Winzip or similar 
on the .tar file.  Make sure to extract the files into the

C:/Biobike/bioetc/data/

directory.  

[Windows and Unix]

Also obtain the files /usr/local/bioetc/data/available-organisms.lisp
and /usr/local/bioetc/data/crossblast-organisms.lisp from Nostoc.

These files are simply lists of available and crossblast organisms.
If you want fewer organisms loaded, you can edit the
available-organisms.lisp list; or if you want more or different
organisms these lists needs to be consistent with your actual
organisms (and the contents of the crossblast table -- see below).  

(The function (available-organisms) is defined to simply read the 
available-organisms.lisp file, while the function (crossblast-organisms)
reads the corresponding file).  

Put these files into /home/biobike/bioetc/data/available-organisms.lisp
and /home/biobike/bioetc/data/crossblast-organisms.lisp
(or C:/Biobike/bioetc/data/available-organisms.lisp etc. on Windows).

Now do the following steps:

  -- start up a Lisp
 
  -- turn off loading of knowledge and organisms:

     (setq *biowebserver* nil)
 
  -- load in the BioBike system:

     (bll)
 
  -- Put yourself into the biolisp package to facilitate things:

     (in-package :bio)
 
  -- Load all the organisms into the frame system by doing: 
	
     (preload-organisms)
     (load-organisms)

This should run to completion.  If not, you are in big trouble and may
have to contact the Biobike team for help.

Now you want to set things up so that just the organisms you want to
load initially get loaded when you start up Biobike.  To do this,
edit the *ORGANISMS-TO-LOAD-LIST* parameter in your config file as
appropriate to your wishes.  You can load all of the organisms by
setting this parameter to :all, none of them by setting it to nil, and
a subset of them by creating a list of organism names or nicknames as
keyword symbols.  Examples:

(setq *ORGANISMS-TO-LOAD-LIST* :all)

or 

(setq *ORGANISMS-TO-LOAD-LIST* '(:syn6803 :a7120 :a29413 :nostoc :tricho))

Now test this out: 

  -- Start up a fresh Lisp, make sure *biowebserver* is T, not nil

  -- Load in BioBike; this should now load in all the knowledge
frames, then preload all the organisms, then load exactly the
organisms you specified in *organisms-to-load-list*.  The emacs lisp
buffer (or the Console window on Windows) will spew out lots of output
as its loading the organisms you requested.  This can generally be
ignored; if an error occurs the load will fail, so if it succeeds,
things should be OK.

Note: To do new organisms, new .zip archives would have to created,
along with new postload.lisp files (which probably should be put into
the .zip archive), and you may want to create goguesses.lisp files as
appropriate.  See various postload.lisp files on Nostoc for code which
calls the mechanism to create the goguesses.lisp file.

Note: The process of creating organism data directories from which
.zip files could be created is beyond the scope of this document.  But
see the organism-submission-format.txt file in the same directory as
this document for more information.


PART E.  STARTING UP BIOBIKE FROM A SHELL SCRIPT -- ** Unix Only **


1. Creating the toplevel shell script

Create a runbwl.sh script in the home directory that looks like this
(no lines of equal signs, of course), with all the paths suitably
modified:

=========================================================================
#!/bin/sh

/home/biobike/BioLisp/Scripts/runbwl-instance.sh /usr/local/acl82.64/alisp8 /home/biobike/BioLisp /home/biobike/users/ blload.lisp 
=========================================================================

Chmod the file so that it is executable:

      % chmod 775 runbwl.sh

Chmod the shell scripts in the Scripts directory so that they are
executable

      % chmod 775 /home/biobike/BioLisp/Scripts/*.sh

Create an alias in the home directory's .bashrc file

      alias startmybiobike="./runbwl.sh"

Change the permissions on the file /home/biobike/BioLisp/Scripts/runbwl-instance.sh to be executable: 

      % chmod 775 /home/biobike/BioLisp/Scripts/runbwl-instance.sh


2. Running the script, starting the weblistener.

Log in (or su) to the login that is to run the Biobike server.

Make sure you are in that login's home directory (cd ~)

Run the script:

       % startmybiobike

This should print out the name of a .bwlscript log file, which
should be in the /system/session-logs/ subdirectory of the directory
identified by the configuration variable *HOME-DIRECTORY*, e.g.

       /home/biobike/users/system/session-logs/

If you use 'tail -f' on this file you can watch as the startup process
develops.  Another approach is to edit the file and inspect the
startup process steps.  You can use M-x Revert Buffer from Emacs to
get the latest contents.  The startup procedure should take about 2
minutes.

Once it has completed successfully (by saying that it has put itself
into a sleep loop at the bottom of the log file) you should be able
to log in as was done above in Part B, step 6.  

This .bwlscript log file can also be referenced using the symbolic link

       /home/biobike/users/system/session-logs/current
    
This log file will be invaluable in figuring out what went wrong when
the Biobike server inevitably fails to start when you type, as above,

      startmybiobike

3. Killing the Biobike server.

Look at the very tiptop of your browser window after you have logged
in to Biobike.  It will show you the machine name, the port number
you are connected to, the Biobike user name by which you logged on, 
and most importantly, the Unix process ID of the Lisp process
that is running Biobike.  

To kill Biobike therefore, simply issue a 

     % kill <process-id> 

or 

      % kill -9 <process-id>

from the Shell, logged in as the Biobike user (or root).  

You may wish to determine whether anyone is using the system before you
bring it down.  You can type 

> (users)

to determine if there are any active users.  


PART F. INSTALLING OTHER BIOLOGICAL SOFTWARE TOOLS THAT BIOBIKE CAN UTILIZE


1.  Other software tools.   

[Unix]

BioBike uses various biological tools, such as BLAST, MEME and
Clustal. These will have to be installed on your system in the
biotools directory (Specified in the configuration file by the
variable *BIOTOOLS-DIRECTORY*) if you wish to use them. 

(Most of these tools are self-contained; all you have to do is to go to
the indicated URL, download and follow the install instructions.)

Usually this is /usr/local/biotools, but can be wherever you like if
you reset the indicated variable.  The way that the various tools get
to their code varies. In most cases when you install the code, you
should create a symbolic link called "current" to the directory
containing the latest binaries. For example, we have blast in:

  /usr/local/biotools/blast/20060214/...

In 

  /usr/local/biotools/blast/ 

we do:

  ln -s 20060214 current

to create a current logical link.

Next you want to tell the biobike instance where the tool's
executables directory is.  This is usually done by setting the
appropriate variable in your CONFIG.LISP file. The details of the
various tool variables are in:

   Biodefs/configuration.lisp

Continuing the above example, we would look in
Biodefs/configuration.lisp and notice that we see:

(defbiocfgvar 
 *blast-executable-toplevel-dir* 
 "The directory under which the FORMATDB and BLASTALL executables live."
 (ecase (os?)
   (:unix "/usr/bin/")
   (:windows nil)
   ))

So, in our config.lisp we would put this line:

  (setq *blast-executable-toplevel-dir* "biotools/blast/current/bin/")

Tools that do not have an appropriate configuration variable, like the
above, are no "conformant", and you'll have to look at the lisp code
in order to figure out how it finds the executables. Most of these
interfaces are in biolisp/Lib. Sometimes the code will look in the
right place (based upon *BIOTOOLS-DIRECTORY*), and sometimes it's just
hard coded. It turns out that this isn't simple because often the I/O
of the program changes per version so that has to be specifically
tracked. 

Here is a list of the main bioinformatics software packages on Nostoc
(most in /usr/local/biotools/), and some remarks, approx. in order of
importance for a bioX installation:

-------
BLAST: (self-contained)

  http://www.ncbi.nlm.nih.gov/Ftp/

(Note: The latest version of blast, 2.2.25, as of 6/21/11,
has different executables than the one we are using, 2.2.13.
We have not yet figured out how to use this new version of blast.)

Executables: blastall, formatdb

CONFIG.LISP var: cl-user::*blast-executable-toplevel-dir*	

Test:

  (progn 
    (load-organism :syn6803)
    (let ((genes (first-n 10 (#^genes s6803))))
      (mapcar #^e-value (cross-blast-short genes genes))))

Should return: (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)
(Or some such string of small values.)

-------
CLUSTALW: (self-contained)

   http://www.ebi.ac.uk/FTP/
   ftp://ftp.ebi.ac.uk/pub/software/unix/clustalw/
   ftp://ftp.ebi.ac.uk/pub/software/unix/clustalw/clustalw1.83.UNIX.tar.gz

Executable: clustalw

In CONFIG.LISP setf: cl-user::*clustal-executable-dir*	

Test:

  (count #\* (#^consensus (align (list #$s6803.sll0745 #$s6803.sll1196))))

Should return: 626 (or some such number)

-------
Phylip

  http://evolution.genetics.washington.edu/phylip.html

To get the source files and do a full installation:

Get me Phylip
Linux or Unix (section)
download link for: gzip'ed tar archive of C sources and documentation
go back to main page, then click how to install phylip
Linux and Unix section

To potentially be able to just get the executables



Source:

--> Get me phylip
--> Precompiled executables available elsewhere (not a link, a section)
--> its page on the Debian web site 
  http://packages.debian.org/unstable/science/phylip
--> Download phylip

Note: I don't know which version from here is the appropriate one for
our 64-bit machines.  Probably ia64 but who knows?

In CONFIG.LISP setf: cl-user::*phylip-executable-dir*	

Test:
  (run-phylip '("AGACGTACGTCGACGAGCACGACGAGCAGAGTACGTAGCTCTCAGCA"
              "AGACGTAAGTCGAAAAGCACAACGAGCAGAAAACGTAGCTCTCAGCA"
              "AGACGTACGTCGACGAGCACGACTTGCAGAGTACGTTGCTCTCAGCA"
              "TTGCGTACGTCGGGTAGCACGACGAGCAGAGTACGTAGTTTTCAGCA"))

Should return:

 ((:TOP 0.0 "AGACGTACGTCGACGAGCACGACGAGCAGAGTACGTAGCTCTCAGCA")
  (:TOP 0.12766 "AGACGTAAGTCGAAAAGCACAACGAGCAGAAAACGTAGCTCTCAGCA")
  (:TOP 0.06383 "AGACGTACGTCGACGAGCACGACTTGCAGAGTACGTTGCTCTCAGCA")
  (:TOP 0.17021 "TTGCGTACGTCGGGTAGCACGACGAGCAGAGTACGTAGTTTTCAGCA"))

-------
GNUPLOT:

  http://www.gnuplot.info/

Click the Download link at the top
Click Primary download site on sourceforge
Looking for the latest version? Download Source files
gunzip 
tar -xvf 
Put in /usr/local/lib/gnuplot/
Follow the instructions in the INSTALL 
./configure
make
make install
Creates the binary as /usr/local/bin/gnuplot 
must have user::*host-machine-apache-url* and user::*webtmp-directory*
set up correctly.  Need /var/www/html/biobikewww -> /home/biobike/webtmp
(user::*webtmp-url* is derived from user::*host-machine-apache-url*)

Test: (line-plot '(3.1 4.1 5.9 2.5))
should return a line graph

-------
DOTTY:

  http://www.graphviz.org/

Dot is a tool for graph drawing (called by the BioBike function
SEEGRAPH). 

You usually install it by RPM, which is a Linux standard method of
installing system-wide tools. If you don't know how to do this, please
ask your systems administrator to do it for you.

Getting it to work is more complex than it should be beacuse it
depends upon the fonts loaded into the particular machine, and fonts
are a nightmare on Linux.  At the moment a particular default font is
chosen by a config parameter:

  *default-dotty-font*

If graphs don't show up, you might want to change this in order to get
this working on your particular machine.

(If you actually know anything about fonts and can explain how to set
these up so they work, please let us know!)

-------
GOOGLEAPI: (needs to be generalized and added to config)

The way that this current works uses Jeff Shrager's own google
account, which is probably wrong and against google's rules! To do
this right you should get yourself your own google API access tokens
via:

  http://www.google.com/apis/

-------
HMMER: (self-contained)

  http://hmmer.janelia.org/
  ;; http://hmmer.wustl.edu/ (obsolete)

-------
MEME: (self-contained)

  http://meme.sdsc.edu/meme/intro.html

-------
RNAz: (self-contained)

  http://www.tbi.univie.ac.at/~wash/RNAz/

Version 2.0pre

The default installation instructions put the executable into 

/usr/local/bin/ 

in the executable file RNAz.  

This isn't how the original lisp RNAz code is expecting things
to be set up as.  

The lisp RNAz code computes the RNAz executable file using:

(external-executable-path "RNAz")

which returns something like 

.../<*biotools-directory*>/RNAz/current/bin/RNAz

So what we do is to have the 

/home/biobike/biotools/RNAz

directory, into which we put the source directory

RNA-2.0pre

and a symbolic link 'current' -> RNAz-2.0pre

then in RNAz-2.0pre we created a bin directory 
and in that bin directory created a symbolic link

RNAz -> /usr/local/bin/RNAz

!!

-------
R

Source:

  http://cran.r-project.org/index.html

R installation is EXTREMELY complex; You install the basic product by
RPM (a linux standard method), and then you have to load in add-on
packages.

Installation and Administration documentation:

  http://cran.r-project.org/doc/manuals/R-admin.pdf
  (Good luck!!)

In CONFIG.LISP setf: *R-executable-dir*

To run R independently, you must add these lines to the .bashrc of the
acocunt from which biobike is started (or otherwise ensure that they
are so on your machine):

  R_HOME=/usr/local/biotools/R/R-2.1.1/
  export R_HOME

Finding and installing R libraries:

First you need to find the location of the library.  

> CRAN.packages()

   [Will ask you to choose a mirror site.]
   
   Gives a long list, like:
   
                      Package              Version     Priority      Bundle    
   aaMI               "aaMI"               "1.0-1"     NA            NA        
   abind              "abind"              "1.1-0"     NA            NA        
   ...
   cclust             "cclust"             "0.6-12"    NA            NA        
   ...

We're going to focus on cclust for this example.

Notice that cclust (and all the others) show up multiple times in the
array. Specifically:

                      Package              Version     Priority      Bundle    
   cclust             "cclust"             "0.6-12"    NA            NA        
   
                      Depends 
   cclust             NA                                                                                                                           
   
                      Imports 
   cclust             NA                              
   
                      Suggests
   cclust             NA                                                                                                                    
   
                      Contains
   cclust             NA                                                              
   
                      Repository
   cclust             "http://cran.fhcrc.org/src/contrib"

Basically this tells you that cclust isn't loaded, and isn't available
locally, so you're going to need to download it from the repository.

> download.packages("cclust", destdir="/usr/local/biotools/R/R-2.1.1/library")

   [The destdir can probably be omitted.]
   [Will ask you to choose a mirror site.]

Result: 

   trying URL 'http://cran.fhcrc.org/src/contrib/cclust_0.6-12.tar.gz'
   Content type 'application/x-gzip' length 11458 bytes
   opened URL
   ==================================================
   downloaded 11Kb
   
        [,1]     [,2]                                                        
   [1,] "cclust" "/usr/local/biotools/R/R-2.1.1/library/cclust_0.6-12.tar.gz"
   
Next you have to install it:

> install.packages("cclust")
  
   trying URL 'http://cran.fhcrc.org/src/contrib/cclust_0.6-12.tar.gz'
   Content type 'application/x-gzip' length 11458 bytes
   opened URL
   ==================================================
   downloaded 11Kb
   
   * Installing *source* package 'cclust' ...
   ** libs
   gcc -I/usr/local/biotools/R/R-2.1.1/include  -I/usr/local/include   -fPIC  -g -O2 -c cclust.c -o cclust.o
   gcc -I/usr/local/biotools/R/R-2.1.1/include  -I/usr/local/include   -fPIC  -g -O2 -c count.c -o count.o
   gcc -I/usr/local/biotools/R/R-2.1.1/include  -I/usr/local/include   -fPIC  -g -O2 -c median.c -o median.o
   gcc -shared -L/usr/local/lib -o cclust.so cclust.o count.o median.o   
   ** R
   ** help
    >>> Building/Updating help pages for package 'cclust'
        Formats: text html latex example 
     Rindexes                          text    html    latex   example
     cclust                            text    html    latex   example
     predict.cclust                    text    html    latex   example
   ** building package indices ...
   * DONE (cclust)
   chmod: changing permissions of `/usr/local/biotools/R/R-2.1.1/library/R.css': Operation not permitted
   
   The downloaded packages are in
   	/tmp/RtmpSTnlSM/downloaded_packages
   ...
   
Now cclust should be available.

To test, see the tutorial on microarray data clustering.

-------
SNARK: (lisp code module)

  http://www.ai.sri.com/~stickel/snark.html

---------

PDFTOTEXT

which is part of poppler.  
Latest version should be linked to on this page: http://poppler.freedesktop.org/

We are using version 0.16.7 which can be found here:
http://poppler.freedesktop.org/releases.html

The directions for installation are in the INSTALL file once you've untarred
and unzipped the download.  

You should install the stuff in 

.../biotools/poppler/

That should create a subdirectory poppler-0.16.7 which should
have a subdirectory UTILS which should contain the executable.  

You may have to change the permissions to 777 on all these directories
including an invisible subdirectory .../utils/.libs/ 
We had to do this for version 0.18.0 but not for 0.16.7

You will need to make sure that the configuration variable

*pdftotext-path* 

is pointing to this executable.  

You can make a symbolic link from /usr/local/bin to this executable
as well so that the program can be used from the shell.  

---------

PPTHTML

The instructions for downloading ppthtml are at 
http://www.forumone.com/blogs/post/extracting-text-office-and-pdf-files

This is not quite a ppt > txt converter, but the program
we found, catppt, while installable and runnable, didn't seem
to work properly.  ppthtml creates an html but it consists
mostly of text and so is a reasonable approximation for using as an
auxiliary search file.  

On edwards, we ran:

sudo apt-get install ppthtml

which seemed to do everything.  At this point

$ which ppthtml

produced 

/usr/bin/ppthtml

and that executable seems to produce acceptable output
when run on a .ppt file


You will need to make sure that the configuration variable

*ppthtml-path*

is pointing to this executable.  

On nostoc and biobike the apt-get command doesn't work.  
We think this is because nostoc and biobike are different
unix installations than edwards.  We cannot figure out how to
install ppthtml on these types of linux machines.  


--------

[Windows]

Some of these packages have Windows versions.  However we have never
attempted to install and run any of them.  Even if they could be
installed, it might require some effort to make Biobike be able to
execute them, since the RUN-SHELL-COMMAND program used on Unix has
somewhat different semantics when executed on Windows.

=================================================================
2.  Creation of a crossblast and orgobj tables.

The Crossblast table is an N-squared table, where N is the total
number of proteins/genes stored in a Biobike instance.  The Crossblast
table stores what is known as the E-value for every pair of
proteins/genes.  (This is a measure of the similarity of the sequences
of the elements of the pair.)

The Crossblast table is very big (on the order of hundreds of megabytes).

In order to use crossblast table you need to have MySQL installed
properly on your machine. There are notes in how-to.html about how to
install and manage the MySQL server, but this is really something that
has to be done by a someone how knows what they're doing (a so-called
"DBA" -- database administrator).

[Unix]

You can theoretically create your own crossblast table (and you will
want to if you use your own organisms), however the best approach if
you are using the cyanobacterial organisms data is to download an
existing ASCII file that MYSQL produces by dumping Nostoc's copy of
the crossblast table.

You will need to install some Unix BLAST programs to be able to
actually run crossblast or other routines that do BLAST.  These are
standard programs that come from NCBI.  You can download them at
   
     http://genome.nhgri.nih.gov/blastall/blast_install/

To download the crossblast table, retrieve it from Nostoc in the
directory

    /usr/local/bioetc/crossblast/ 

The file is currently stored as a .gz (g-zipped) file, and even so is 
54 MB.  It is named crossblast with a timestamp.  

To recreate the crossblast table within MYSQL from this downloaded file:

     -- Unzip the file (it makes sense to have put it in a directory
corresponding to its location on Nostoc)

     -- Start up a Lisp
     
     -- Turn off loading of knowledge and organisms
        (setq *biowebserver* nil)

     -- Load in BioBike

     -- run REPLACE-CROSSBLAST-TABLE, e.g.

        (bio::replace-crossblast-table
          "/home/biovcu/bioetc/crossblast/<whatever>"
          :include-symmetries? t
          :really-delete-the-old-table?? t)

The orgobj tables tell the system which objects go with which
organisms. This is usually done from a running BioBike listener, so
you'll want to actually do it later, but here's how you do it once you
get around to it (without these tables, the functions that use the
freshly-installed crossblast table won't work!)

From a running listener:

1. Ensure all organisms are loaded:

   > (mapcar #'bio::load-organism (available-organisms))

2. Do:

   > (bio::recreate-orgobj-tables :really-delete-the-old-tables?? t)

This can take a few tens of seconds -- maybe up to a minute.

[Windows]

We don't recommend doing this. In theory, once you have MySQL
installed properly, the same steps as the above would work, but we've
never tried it!

Note: The file /usr/local/bioetc/data/crossblast-organisms.lisp
needs to be consistent with the contents of the crossblast table.
(See above.)

PART G. INSTALLING MODULES 


Modules are auxiliary pieces of code, optional with respect to the
standard Biobike system.  

In general a module is a directory (or symbolic link to a directory)
in the psuedo-user account that contains a load.lisp file.  At startup
time, if the keyword symbol :foo, e.g., is in the
*INSTANCE-MODULE-LIST*, then the system looks for a subdirectory named
foo under the psuedo-user account.  If found, it attempts to load the
load.lisp file, which presumably loads the rest of the files composing
that module.  

Currently the only module we load is the SNARK module (a theorem
prover).  Talk to Jeff Shrager if you would like more information.


PART H. CONGRATULATIONS!



