;;; -*- mode: Lisp; Syntax: Common-Lisp; Package: wb; -*-

(in-package :wb)

;;; +=========================================================================+
;;; | Copyright (c) 2002, 2003, 2004 JP Massar, Jeff Shrager, Mike Travers    |
;;; |                                                                         |
;;; | Permission is hereby granted, free of charge, to any person obtaining   |
;;; | a copy of this software and associated documentation files (the         |
;;; | "Software"), to deal in the Software without restriction, including     |
;;; | without limitation the rights to use, copy, modify, merge, publish,     |
;;; | distribute, sublicense, and/or sell copies of the Software, and to      |
;;; | permit persons to whom the Software is furnished to do so, subject to   |
;;; | the following conditions:                                               |
;;; |                                                                         |
;;; | The above copyright notice and this permission notice shall be included |
;;; | in all copies or substantial portions of the Software.                  |
;;; |                                                                         |
;;; | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         |
;;; | EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      |
;;; | MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  |
;;; | IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    |
;;; | CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    |
;;; | TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       |
;;; | SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  |
;;; +=========================================================================+

;;; Author:  JP Massar.

;;; To create a URL to a lisp symbol, use 

;;; (common-lisp-external-symbol-url <symbol>) 

(defvar *lisp-hyperspec-symbol-urls-table*
  (create-hash-table
   '((cl:&allow-other-keys "03_da.htm#AMallow-other-keys")
     (cl:&aux "03_da.htm#AMaux")
     (cl:&body "03_dd.htm#AMbody")
     (cl:&environment "03_dd.htm#AMenvironment")
     (cl:&key "03_da.htm#AMkey")
     (cl:&optional "03_da.htm#AMoptional")
     (cl:&rest "03_da.htm#AMrest")
     (cl:&whole "03_dd.htm#AMwhole")
     (cl:* "a_st.htm#ST")
     (cl:** "v__stst_.htm#STST")
     (cl:*** "v__stst_.htm#STSTST")
     (cl:*break-on-signals* "v_break_.htm#STbreak-on-signalsST")
     (cl:*compile-file-pathname* "v_cmp_fi.htm#STcompile-file-pathnameST")
     (cl:*compile-file-truename* "v_cmp_fi.htm#STcompile-file-truenameST")
     (cl:*compile-print* "v_cmp_pr.htm#STcompile-printST")
     (cl:*compile-verbose* "v_cmp_pr.htm#STcompile-verboseST")
     (cl:*debug-io* "v_debug_.htm#STdebug-ioST")
     (cl:*debugger-hook* "v_debugg.htm#STdebugger-hookST")
     (cl:*default-pathname-defaults* 
      "v_defaul.htm#STdefault-pathname-defaultsST")
     (cl:*error-output* "v_debug_.htm#STerror-outputST")
     (cl:*features* "v_featur.htm#STfeaturesST")
     (cl:*gensym-counter* "v_gensym.htm#STgensym-counterST")
     (cl:*load-pathname* "v_ld_pns.htm#STload-pathnameST")
     (cl:*load-print* "v_ld_prs.htm#STload-printST")
     (cl:*load-truename* "v_ld_pns.htm#STload-truenameST")
     (cl:*load-verbose* "v_ld_prs.htm#STload-verboseST")
     (cl:*macroexpand-hook* "v_mexp_h.htm#STmacroexpand-hookST")
     (cl:*modules* "v_module.htm#STmodulesST")
     (cl:*package* "v_pkg.htm#STpackageST")
     (cl:*print-array* "v_pr_ar.htm#STprint-arrayST")
     (cl:*print-base* "v_pr_bas.htm#STprint-baseST")
     (cl:*print-case* "v_pr_cas.htm#STprint-caseST")
     (cl:*print-circle* "v_pr_cir.htm#STprint-circleST")
     (cl:*print-escape* "v_pr_esc.htm#STprint-escapeST")
     (cl:*print-gensym* "v_pr_gen.htm#STprint-gensymST")
     (cl:*print-length* "v_pr_lev.htm#STprint-lengthST")
     (cl:*print-level* "v_pr_lev.htm#STprint-levelST")
     (cl:*print-lines* "v_pr_lin.htm#STprint-linesST")
     (cl:*print-miser-width* "v_pr_mis.htm#STprint-miser-widthST")
     (cl:*print-pprint-dispatch* "v_pr_ppr.htm#STprint-pprint-dispatchST")
     (cl:*print-pretty* "v_pr_pre.htm#STprint-prettyST")
     (cl:*print-radix* "v_pr_bas.htm#STprint-radixST")
     (cl:*print-readably* "v_pr_rda.htm#STprint-readablyST")
     (cl:*print-right-margin* "v_pr_rig.htm#STprint-right-marginST")
     (cl:*query-io* "v_debug_.htm#STquery-ioST")
     (cl:*random-state* "v_rnd_st.htm#STrandom-stateST")
     (cl:*read-base* "v_rd_bas.htm#STread-baseST")
     (cl:*read-default-float-format* 
      "v_rd_def.htm#STread-default-float-formatST")
     (cl:*read-eval* "v_rd_eva.htm#STread-evalST")
     (cl:*read-suppress* "v_rd_sup.htm#STread-suppressST")
     (cl:*readtable* "v_rdtabl.htm#STreadtableST")
     (cl:*standard-input* "v_debug_.htm#STstandard-inputST")
     (cl:*standard-output* "v_debug_.htm#STstandard-outputST")
     (cl:*terminal-io* "v_termin.htm#STterminal-ioST")
     (cl:*trace-output* "v_debug_.htm#STtrace-outputST")
     (cl:+ "a_pl.htm#PL")
     (cl:++ "v_pl_plp.htm#PLPL")
     (cl:+++ "v_pl_plp.htm#PLPLPL")
     (cl:- "a__.htm#-")
     (cl:/ "a_sl.htm#SL")
     (cl:// "v_sl_sls.htm#SLSL")
     (cl:/// "v_sl_sls.htm#SLSLSL")
     (cl:/= "f_eq_sle.htm#SLEQ")
     (cl:1+ "f_1pl_1_.htm#1PL")
     (cl:1- "f_1pl_1_.htm#1-")
     (cl:< "f_eq_sle.htm#LT");
     (cl:<= "f_eq_sle.htm#LTEQ");=
     (cl:= "f_eq_sle.htm#EQ")
     (cl:> "f_eq_sle.htm#GT");
     (cl:>= "f_eq_sle.htm#GTEQ");=
     (cl:abort "a_abort.htm#abort")
     (cl:abs "f_abs.htm#abs")
     (cl:acons "f_acons.htm#acons")
     (cl:acos "f_asin_.htm#acos")
     (cl:acosh "f_sinh_.htm#acosh")
     (cl:add-method "f_add_me.htm#add-method")
     (cl:adjoin "f_adjoin.htm#adjoin")
     (cl:adjust-array "f_adjust.htm#adjust-array")
     (cl:adjustable-array-p "f_adju_1.htm#adjustable-array-p")
     (cl:allocate-instance "f_alloca.htm#allocate-instance")
     (cl:alpha-char-p "f_alpha_.htm#alpha-char-p")
     (cl:alphanumericp "f_alphan.htm#alphanumericp")
     (cl:and "a_and.htm#and")
     (cl:append "f_append.htm#append")
     (cl:apply "f_apply.htm#apply")
     (cl:apropos "f_apropo.htm#apropos")
     (cl:apropos-list "f_apropo.htm#apropos-list")
     (cl:aref "f_aref.htm#aref")
     (cl:arithmetic-error "e_arithm.htm#arithmetic-error")
     (cl:arithmetic-error-operands "f_arithm.htm#arithmetic-error-operands")
     (cl:arithmetic-error-operation "f_arithm.htm#arithmetic-error-operation")
     (cl:array "t_array.htm#array")
     (cl:array-dimension "f_ar_dim.htm#array-dimension")
     (cl:array-dimension-limit "v_ar_dim.htm#array-dimension-limit")
     (cl:array-dimensions "f_ar_d_1.htm#array-dimensions")
     (cl:array-displacement "f_ar_dis.htm#array-displacement")
     (cl:array-element-type "f_ar_ele.htm#array-element-type")
     (cl:array-has-fill-pointer-p "f_ar_has.htm#array-has-fill-pointer-p")
     (cl:array-in-bounds-p "f_ar_in_.htm#array-in-bounds-p")
     (cl:array-rank "f_ar_ran.htm#array-rank")
     (cl:array-rank-limit "v_ar_ran.htm#array-rank-limit")
     (cl:array-row-major-index "f_ar_row.htm#array-row-major-index")
     (cl:array-total-size "f_ar_tot.htm#array-total-size")
     (cl:array-total-size-limit "v_ar_tot.htm#array-total-size-limit")
     (cl:arrayp "f_arrayp.htm#arrayp")
     (cl:ash "f_ash.htm#ash")
     (cl:asin "f_asin_.htm#asin")
     (cl:asinh "f_sinh_.htm#asinh")
     (cl:assert "m_assert.htm#assert")
     (cl:assoc "f_assocc.htm#assoc")
     (cl:assoc-if "f_assocc.htm#assoc-if")
     (cl:assoc-if-not "f_assocc.htm#assoc-if-not")
     (cl:atan "f_asin_.htm#atan")
     (cl:atanh "f_sinh_.htm#atanh")
     (cl:atom "a_atom.htm#atom")
     (cl:base-char "t_base_c.htm#base-char")
     (cl:base-string "t_base_s.htm#base-string")
     (cl:bignum "t_bignum.htm#bignum")
     (cl:bit "a_bit.htm#bit")
     (cl:bit-and "f_bt_and.htm#bit-and")
     (cl:bit-andc1 "f_bt_and.htm#bit-andc1")
     (cl:bit-andc2 "f_bt_and.htm#bit-andc2")
     (cl:bit-eqv "f_bt_and.htm#bit-eqv")
     (cl:bit-ior "f_bt_and.htm#bit-ior")
     (cl:bit-nand "f_bt_and.htm#bit-nand")
     (cl:bit-nor "f_bt_and.htm#bit-nor")
     (cl:bit-not "f_bt_and.htm#bit-not")
     (cl:bit-orc1 "f_bt_and.htm#bit-orc1")
     (cl:bit-orc2 "f_bt_and.htm#bit-orc2")
     (cl:bit-vector "t_bt_vec.htm#bit-vector")
     (cl:bit-vector-p "f_bt_vec.htm#bit-vector-p")
     (cl:bit-xor "f_bt_and.htm#bit-xor")
     (cl:block "s_block.htm#block")
     (cl:boole "f_boole.htm#boole")
     (cl:boole-1 "v_b_1_b.htm#boole-1")
     (cl:boole-2 "v_b_1_b.htm#boole-2")
     (cl:boole-and "v_b_1_b.htm#boole-and")
     (cl:boole-andc1 "v_b_1_b.htm#boole-andc1")
     (cl:boole-andc2 "v_b_1_b.htm#boole-andc2")
     (cl:boole-c1 "v_b_1_b.htm#boole-c1")
     (cl:boole-c2 "v_b_1_b.htm#boole-c2")
     (cl:boole-clr "v_b_1_b.htm#boole-clr")
     (cl:boole-eqv "v_b_1_b.htm#boole-eqv")
     (cl:boole-ior "v_b_1_b.htm#boole-ior")
     (cl:boole-nand "v_b_1_b.htm#boole-nand")
     (cl:boole-nor "v_b_1_b.htm#boole-nor")
     (cl:boole-orc1 "v_b_1_b.htm#boole-orc1")
     (cl:boole-orc2 "v_b_1_b.htm#boole-orc2")
     (cl:boole-set "v_b_1_b.htm#boole-set")
     (cl:boole-xor "v_b_1_b.htm#boole-xor")
     (cl:boolean "t_ban.htm#boolean")
     (cl:both-case-p "f_upper_.htm#both-case-p")
     (cl:boundp "f_boundp.htm#boundp")
     (cl:break "f_break.htm#break")
     (cl:broadcast-stream "t_broadc.htm#broadcast-stream")
     (cl:broadcast-stream-streams "f_broadc.htm#broadcast-stream-streams")
     (cl:built-in-class "t_built_.htm#built-in-class")
     (cl:butlast "f_butlas.htm#butlast")
     (cl:byte "f_by_by.htm#byte")
     (cl:byte-position "f_by_by.htm#byte-position")
     (cl:byte-size "f_by_by.htm#byte-size")
     (cl:caaaar "f_car_c.htm#caaaar")
     (cl:caaadr "f_car_c.htm#caaadr")
     (cl:caaar "f_car_c.htm#caaar")
     (cl:caadar "f_car_c.htm#caadar")
     (cl:caaddr "f_car_c.htm#caaddr")
     (cl:caadr "f_car_c.htm#caadr")
     (cl:caar "f_car_c.htm#caar")
     (cl:cadaar "f_car_c.htm#cadaar")
     (cl:cadadr "f_car_c.htm#cadadr")
     (cl:cadar "f_car_c.htm#cadar")
     (cl:caddar "f_car_c.htm#caddar")
     (cl:cadddr "f_car_c.htm#cadddr")
     (cl:caddr "f_car_c.htm#caddr")
     (cl:cadr "f_car_c.htm#cadr")
     (cl:call-arguments-limit "v_call_a.htm#call-arguments-limit")
     (cl:call-method "m_call_m.htm#call-method")
     (cl:call-next-method "f_call_n.htm#call-next-method")
     (cl:car "f_car_c.htm#car")
     (cl:case "m_case_.htm#case")
     (cl:catch "s_catch.htm#catch")
     (cl:ccase "m_case_.htm#ccase")
     (cl:cdaaar "f_car_c.htm#cdaaar")
     (cl:cdaadr "f_car_c.htm#cdaadr")
     (cl:cdaar "f_car_c.htm#cdaar")
     (cl:cdadar "f_car_c.htm#cdadar")
     (cl:cdaddr "f_car_c.htm#cdaddr")
     (cl:cdadr "f_car_c.htm#cdadr")
     (cl:cdar "f_car_c.htm#cdar")
     (cl:cddaar "f_car_c.htm#cddaar")
     (cl:cddadr "f_car_c.htm#cddadr")
     (cl:cddar "f_car_c.htm#cddar")
     (cl:cdddar "f_car_c.htm#cdddar")
     (cl:cddddr "f_car_c.htm#cddddr")
     (cl:cdddr "f_car_c.htm#cdddr")
     (cl:cddr "f_car_c.htm#cddr")
     (cl:cdr "f_car_c.htm#cdr")
     (cl:ceiling "f_floorc.htm#ceiling")
     (cl:cell-error "e_cell_e.htm#cell-error")
     (cl:cell-error-name "f_cell_e.htm#cell-error-name")
     (cl:cerror "f_cerror.htm#cerror")
     (cl:change-class "f_chg_cl.htm#change-class")
     (cl:char "f_char_.htm#char")
     (cl:char-code "f_char_c.htm#char-code")
     (cl:char-code-limit "v_char_c.htm#char-code-limit")
     (cl:char-downcase "f_char_u.htm#char-downcase")
     (cl:char-equal "f_chareq.htm#char-equal")
     (cl:char-greaterp "f_chareq.htm#char-greaterp")
     (cl:char-int "f_char_i.htm#char-int")
     (cl:char-lessp "f_chareq.htm#char-lessp")
     (cl:char-name "f_char_n.htm#char-name")
     (cl:char-not-equal "f_chareq.htm#char-not-equal")
     (cl:char-not-greaterp "f_chareq.htm#char-not-greaterp")
     (cl:char-not-lessp "f_chareq.htm#char-not-lessp")
     (cl:char-upcase "f_char_u.htm#char-upcase")
     (cl:char/= "f_chareq.htm#charSLEQ")
     (cl:char< "f_chareq.htm#charLT");
     (cl:char<= "f_chareq.htm#charLTEQ");=
     (cl:char= "f_chareq.htm#charEQ")
     (cl:char> "f_chareq.htm#charGT");
     (cl:char>= "f_chareq.htm#charGTEQ");=
     (cl:character "a_ch.htm#character")
     (cl:characterp "f_chp.htm#characterp")
     (cl:check-type "m_check_.htm#check-type")
     (cl:cis "f_cis.htm#cis")
     (cl:class "t_class.htm#class")
     (cl:class-name "f_class_.htm#class-name")
     (cl:class-of "f_clas_1.htm#class-of")
     (cl:clear-input "f_clear_.htm#clear-input")
     (cl:clear-output "f_finish.htm#clear-output")
     (cl:close "f_close.htm#close")
     (cl:clrhash "f_clrhas.htm#clrhash")
     (cl:code-char "f_code_c.htm#code-char")
     (cl:coerce "f_coerce.htm#coerce")
     (cl:compilation-speed "d_optimi.htm#compilation-speed")
     (cl:compile "f_cmp.htm#compile")
     (cl:compile-file "f_cmp_fi.htm#compile-file")
     (cl:compile-file-pathname "f_cmp__1.htm#compile-file-pathname")
     (cl:compiled-function "t_cmpd_f.htm#compiled-function")
     (cl:compiled-function-p "f_cmpd_f.htm#compiled-function-p")
     (cl:compiler-macro "f_docume.htm#compiler-macro")
     (cl:compiler-macro-function "f_cmp_ma.htm#compiler-macro-function")
     (cl:complement "f_comple.htm#complement")
     (cl:complex "a_comple.htm#complex")
     (cl:complexp "f_comp_3.htm#complexp")
     (cl:compute-applicable-methods "f_comput.htm#compute-applicable-methods")
     (cl:compute-restarts "f_comp_1.htm#compute-restarts")
     (cl:concatenate "f_concat.htm#concatenate")
     (cl:concatenated-stream "t_concat.htm#concatenated-stream")
     (cl:concatenated-stream-streams 
      "f_conc_1.htm#concatenated-stream-streams")
     (cl:cond "m_cond.htm#cond")
     (cl:condition "e_cnd.htm#condition")
     (cl:conjugate "f_conjug.htm#conjugate")
     (cl:cons "a_cons.htm#cons")
     (cl:consp "f_consp.htm#consp")
     (cl:constantly "f_cons_1.htm#constantly")
     (cl:constantp "f_consta.htm#constantp")
     (cl:continue "a_contin.htm#continue")
     (cl:control-error "e_contro.htm#control-error")
     (cl:copy-alist "f_cp_ali.htm#copy-alist")
     (cl:copy-list "f_cp_lis.htm#copy-list")
     (cl:copy-pprint-dispatch "f_cp_ppr.htm#copy-pprint-dispatch")
     (cl:copy-readtable "f_cp_rdt.htm#copy-readtable")
     (cl:copy-seq "f_cp_seq.htm#copy-seq")
     (cl:copy-structure "f_cp_stu.htm#copy-structure")
     (cl:copy-symbol "f_cp_sym.htm#copy-symbol")
     (cl:copy-tree "f_cp_tre.htm#copy-tree")
     (cl:cos "f_sin_c.htm#cos")
     (cl:cosh "f_sinh_.htm#cosh")
     (cl:count "f_countc.htm#count")
     (cl:count-if "f_countc.htm#count-if")
     (cl:count-if-not "f_countc.htm#count-if-not")
     (cl:ctypecase "m_tpcase.htm#ctypecase")
     (cl:debug "d_optimi.htm#debug")
     (cl:decf "m_incf_.htm#decf")
     (cl:declaim "m_declai.htm#declaim")
     (cl:declaration "d_declar.htm#declaration")
     (cl:declare "s_declar.htm#declare")
     (cl:decode-float "f_dec_fl.htm#decode-float")
     (cl:decode-universal-time "f_dec_un.htm#decode-universal-time")
     (cl:defclass "m_defcla.htm#defclass")
     (cl:defconstant "m_defcon.htm#defconstant")
     (cl:defgeneric "m_defgen.htm#defgeneric")
     (cl:define-compiler-macro "m_define.htm#define-compiler-macro")
     (cl:define-condition "m_defi_5.htm#define-condition")
     (cl:define-method-combination "m_defi_4.htm#define-method-combination")
     (cl:define-modify-macro "m_defi_2.htm#define-modify-macro")
     (cl:define-setf-expander "m_defi_3.htm#define-setf-expander")
     (cl:define-symbol-macro "m_defi_1.htm#define-symbol-macro")
     (cl:defmacro "m_defmac.htm#defmacro")
     (cl:defmethod "m_defmet.htm#defmethod")
     (cl:defpackage "m_defpkg.htm#defpackage")
     (cl:defparameter "m_defpar.htm#defparameter")
     (cl:defsetf "m_defset.htm#defsetf")
     (cl:defstruct "m_defstr.htm#defstruct")
     (cl:deftype "m_deftp.htm#deftype")
     (cl:defun "m_defun.htm#defun")
     (cl:defvar "m_defpar.htm#defvar")
     (cl:delete "f_rm_rm.htm#delete")
     (cl:delete-duplicates "f_rm_dup.htm#delete-duplicates")
     (cl:delete-file "f_del_fi.htm#delete-file")
     (cl:delete-if "f_rm_rm.htm#delete-if")
     (cl:delete-if-not "f_rm_rm.htm#delete-if-not")
     (cl:delete-package "f_del_pk.htm#delete-package")
     (cl:denominator "f_numera.htm#denominator")
     (cl:deposit-field "f_deposi.htm#deposit-field")
     (cl:describe "f_descri.htm#describe")
     (cl:describe-object "f_desc_1.htm#describe-object")
     (cl:destructuring-bind "m_destru.htm#destructuring-bind")
     (cl:digit-char "f_digit_.htm#digit-char")
     (cl:digit-char-p "f_digi_1.htm#digit-char-p")
     (cl:directory "f_dir.htm#directory")
     (cl:directory-namestring "f_namest.htm#directory-namestring")
     (cl:disassemble "f_disass.htm#disassemble")
     (cl:division-by-zero "e_divisi.htm#division-by-zero")
     (cl:do "m_do_do.htm#do")
     (cl:do* "m_do_do.htm#doST")
     (cl:do-all-symbols "m_do_sym.htm#do-all-symbols")
     (cl:do-external-symbols "m_do_sym.htm#do-external-symbols")
     (cl:do-symbols "m_do_sym.htm#do-symbols")
     (cl:documentation "f_docume.htm#documentation")
     (cl:dolist "m_dolist.htm#dolist")
     (cl:dotimes "m_dotime.htm#dotimes")
     (cl:double-float "t_short_.htm#double-float")
     (cl:double-float-epsilon "v_short_.htm#double-float-epsilon")
     (cl:double-float-negative-epsilon 
      "v_short_.htm#double-float-negative-epsilon")
     (cl:dpb "f_dpb.htm#dpb")
     (cl:dribble "f_dribbl.htm#dribble")
     (cl:dynamic-extent "d_dynami.htm#dynamic-extent")
     (cl:ecase "m_case_.htm#ecase")
     (cl:echo-stream "t_echo_s.htm#echo-stream")
     (cl:echo-stream-input-stream "f_echo_s.htm#echo-stream-input-stream")
     (cl:echo-stream-output-stream "f_echo_s.htm#echo-stream-output-stream")
     (cl:ed "f_ed.htm#ed")
     (cl:eighth "f_firstc.htm#eighth")
     (cl:elt "f_elt.htm#elt")
     (cl:encode-universal-time "f_encode.htm#encode-universal-time")
     (cl:end-of-file "e_end_of.htm#end-of-file")
     (cl:endp "f_endp.htm#endp")
     (cl:enough-namestring "f_namest.htm#enough-namestring")
     (cl:ensure-directories-exist "f_ensu_1.htm#ensure-directories-exist")
     (cl:ensure-generic-function "f_ensure.htm#ensure-generic-function")
     (cl:eq "f_eq.htm#eq")
     (cl:eql "a_eql.htm#eql")
     (cl:equal "f_equal.htm#equal")
     (cl:equalp "f_equalp.htm#equalp")
     (cl:error "a_error.htm#error")
     (cl:etypecase "m_tpcase.htm#etypecase")
     (cl:eval "f_eval.htm#eval")
     (cl:eval-when "s_eval_w.htm#eval-when")
     (cl:evenp "f_evenpc.htm#evenp")
     (cl:every "f_everyc.htm#every")
     (cl:exp "f_exp_e.htm#exp")
     (cl:export "f_export.htm#export")
     (cl:expt "f_exp_e.htm#expt")
     (cl:extended-char "t_extend.htm#extended-char")
     (cl:fboundp "f_fbound.htm#fboundp")
     (cl:fceiling "f_floorc.htm#fceiling")
     (cl:fdefinition "f_fdefin.htm#fdefinition")
     (cl:ffloor "f_floorc.htm#ffloor")
     (cl:fifth "f_firstc.htm#fifth")
     (cl:file-author "f_file_a.htm#file-author")
     (cl:file-error "e_file_e.htm#file-error")
     (cl:file-error-pathname "f_file_e.htm#file-error-pathname")
     (cl:file-length "f_file_l.htm#file-length")
     (cl:file-namestring "f_namest.htm#file-namestring")
     (cl:file-position "f_file_p.htm#file-position")
     (cl:file-stream "t_file_s.htm#file-stream")
     (cl:file-string-length "f_file_s.htm#file-string-length")
     (cl:file-write-date "f_file_w.htm#file-write-date")
     (cl:fill "f_fill.htm#fill")
     (cl:fill-pointer "f_fill_p.htm#fill-pointer")
     (cl:find "f_find_.htm#find")
     (cl:find-all-symbols "f_find_a.htm#find-all-symbols")
     (cl:find-class "f_find_c.htm#find-class")
     (cl:find-if "f_find_.htm#find-if")
     (cl:find-if-not "f_find_.htm#find-if-not")
     (cl:find-method "f_find_m.htm#find-method")
     (cl:find-package "f_find_p.htm#find-package")
     (cl:find-restart "f_find_r.htm#find-restart")
     (cl:find-symbol "f_find_s.htm#find-symbol")
     (cl:finish-output "f_finish.htm#finish-output")
     (cl:first "f_firstc.htm#first")
     (cl:fixnum "t_fixnum.htm#fixnum")
     (cl:flet "s_flet_.htm#flet")
     (cl:float "a_float.htm#float")
     (cl:float-digits "f_dec_fl.htm#float-digits")
     (cl:float-precision "f_dec_fl.htm#float-precision")
     (cl:float-radix "f_dec_fl.htm#float-radix")
     (cl:float-sign "f_dec_fl.htm#float-sign")
     (cl:floating-point-inexact "e_floa_1.htm#floating-point-inexact")
     (cl:floating-point-invalid-operation 
      "e_floati.htm#floating-point-invalid-operation")
     (cl:floating-point-overflow "e_floa_2.htm#floating-point-overflow")
     (cl:floating-point-underflow "e_floa_3.htm#floating-point-underflow")
     (cl:floatp "f_floatp.htm#floatp")
     (cl:floor "f_floorc.htm#floor")
     (cl:fmakunbound "f_fmakun.htm#fmakunbound")
     (cl:force-output "f_finish.htm#force-output")
     (cl:format "f_format.htm#format")
     (cl:formatter "m_format.htm#formatter")
     (cl:fourth "f_firstc.htm#fourth")
     (cl:fresh-line "f_terpri.htm#fresh-line")
     (cl:fround "f_floorc.htm#fround")
     (cl:ftruncate "f_floorc.htm#ftruncate")
     (cl:ftype "d_ftype.htm#ftype")
     (cl:funcall "f_funcal.htm#funcall")
     (cl:function "a_fn.htm#function")
     (cl:function-keywords "f_fn_kwd.htm#function-keywords")
     (cl:function-lambda-expression "f_fn_lam.htm#function-lambda-expression")
     (cl:functionp "f_fnp.htm#functionp")
     (cl:gcd "f_gcd.htm#gcd")
     (cl:generic-function "t_generi.htm#generic-function")
     (cl:gensym "f_gensym.htm#gensym")
     (cl:gentemp "f_gentem.htm#gentemp")
     (cl:get "f_get.htm#get")
     (cl:get-decoded-time "f_get_un.htm#get-decoded-time")
     (cl:get-dispatch-macro-character 
      "f_set__1.htm#get-dispatch-macro-character")
     (cl:get-internal-real-time "f_get_in.htm#get-internal-real-time")
     (cl:get-internal-run-time "f_get__1.htm#get-internal-run-time")
     (cl:get-macro-character "f_set_ma.htm#get-macro-character")
     (cl:get-output-stream-string "f_get_ou.htm#get-output-stream-string")
     (cl:get-properties "f_get_pr.htm#get-properties")
     (cl:get-setf-expansion "f_get_se.htm#get-setf-expansion")
     (cl:get-universal-time "f_get_un.htm#get-universal-time")
     (cl:getf "f_getf.htm#getf")
     (cl:gethash "f_gethas.htm#gethash")
     (cl:go "s_go.htm#go")
     (cl:graphic-char-p "f_graphi.htm#graphic-char-p")
     (cl:handler-bind "m_handle.htm#handler-bind")
     (cl:handler-case "m_hand_1.htm#handler-case")
     (cl:hash-table "t_hash_t.htm#hash-table")
     (cl:hash-table-count "f_hash_1.htm#hash-table-count")
     (cl:hash-table-p "f_hash_t.htm#hash-table-p")
     (cl:hash-table-rehash-size "f_hash_2.htm#hash-table-rehash-size")
     (cl:hash-table-rehash-threshold 
      "f_hash_3.htm#hash-table-rehash-threshold")
     (cl:hash-table-size "f_hash_4.htm#hash-table-size")
     (cl:hash-table-test "f_hash_5.htm#hash-table-test")
     (cl:host-namestring "f_namest.htm#host-namestring")
     (cl:identity "f_identi.htm#identity")
     (cl:if "s_if.htm#if")
     (cl:ignorable "d_ignore.htm#ignorable")
     (cl:ignore "d_ignore.htm#ignore")
     (cl:ignore-errors "m_ignore.htm#ignore-errors")
     (cl:imagpart "f_realpa.htm#imagpart")
     (cl:import "f_import.htm#import")
     (cl:in-package "m_in_pkg.htm#in-package")
     (cl:incf "m_incf_.htm#incf")
     (cl:initialize-instance "f_init_i.htm#initialize-instance")
     (cl:inline "d_inline.htm#inline")
     (cl:input-stream-p "f_in_stm.htm#input-stream-p")
     (cl:inspect "f_inspec.htm#inspect")
     (cl:integer "t_intege.htm#integer")
     (cl:integer-decode-float "f_dec_fl.htm#integer-decode-float")
     (cl:integer-length "f_intege.htm#integer-length")
     (cl:integerp "f_inte_1.htm#integerp")
     (cl:interactive-stream-p "f_intera.htm#interactive-stream-p")
     (cl:intern "f_intern.htm#intern")
     (cl:internal-time-units-per-second 
      "v_intern.htm#internal-time-units-per-second")
     (cl:intersection "f_isec_.htm#intersection")
     (cl:invalid-method-error "f_invali.htm#invalid-method-error")
     (cl:invoke-debugger "f_invoke.htm#invoke-debugger")
     (cl:invoke-restart "f_invo_1.htm#invoke-restart")
     (cl:invoke-restart-interactively 
      "f_invo_2.htm#invoke-restart-interactively")
     (cl:isqrt "f_sqrt_.htm#isqrt")
     (cl:keyword "t_kwd.htm#keyword")
     (cl:keywordp "f_kwdp.htm#keywordp")
     (cl:labels "s_flet_.htm#labels")
     (cl:lambda "a_lambda.htm#lambda")
     (cl:lambda-list-keywords "v_lambda.htm#lambda-list-keywords")
     (cl:lambda-parameters-limit "v_lamb_1.htm#lambda-parameters-limit")
     (cl:last "f_last.htm#last")
     (cl:lcm "f_lcm.htm#lcm")
     (cl:ldb "f_ldb.htm#ldb")
     (cl:ldb-test "f_ldb_te.htm#ldb-test")
     (cl:ldiff "f_ldiffc.htm#ldiff")
     (cl:least-negative-double-float 
      "v_most_1.htm#least-negative-double-float")
     (cl:least-negative-long-float 
      "v_most_1.htm#least-negative-long-float")
     (cl:least-negative-normalized-double-float 
      "v_most_1.htm#least-negative-normalized-double-float")
     (cl:least-negative-normalized-long-float 
      "v_most_1.htm#least-negative-normalized-long-float")
     (cl:least-negative-normalized-short-float 
      "v_most_1.htm#least-negative-normalized-short-float")
     (cl:least-negative-normalized-single-float 
      "v_most_1.htm#least-negative-normalized-single-float")
     (cl:least-negative-short-float 
      "v_most_1.htm#least-negative-short-float")
     (cl:least-negative-single-float 
      "v_most_1.htm#least-negative-single-float")
     (cl:least-positive-double-float 
      "v_most_1.htm#least-positive-double-float")
     (cl:least-positive-long-float 
      "v_most_1.htm#least-positive-long-float")
     (cl:least-positive-normalized-double-float 
      "v_most_1.htm#least-positive-normalized-double-float")
     (cl:least-positive-normalized-long-float 
      "v_most_1.htm#least-positive-normalized-long-float")
     (cl:least-positive-normalized-short-float 
      "v_most_1.htm#least-positive-normalized-short-float")
     (cl:least-positive-normalized-single-float 
      "v_most_1.htm#least-positive-normalized-single-float")
     (cl:least-positive-short-float "v_most_1.htm#least-positive-short-float")
     (cl:least-positive-single-float
      "v_most_1.htm#least-positive-single-float")
     (cl:length "f_length.htm#length")
     (cl:let "s_let_l.htm#let")
     (cl:let* "s_let_l.htm#letST")
     (cl:lisp-implementation-type "f_lisp_i.htm#lisp-implementation-type")
     (cl:lisp-implementation-version 
      "f_lisp_i.htm#lisp-implementation-version")
     (cl:list "a_list.htm#list")
     (cl:list* "f_list_.htm#listST")
     (cl:list-all-packages "f_list_a.htm#list-all-packages")
     (cl:list-length "f_list_l.htm#list-length")
     (cl:listen "f_listen.htm#listen")
     (cl:listp "f_listp.htm#listp")
     (cl:load "f_load.htm#load")
     (cl:load-logical-pathname-translations 
      "f_ld_log.htm#load-logical-pathname-translations")
     (cl:load-time-value "s_ld_tim.htm#load-time-value")
     (cl:locally "s_locall.htm#locally")
     (cl:log "f_log.htm#log")
     (cl:logand "f_logand.htm#logand")
     (cl:logandc1 "f_logand.htm#logandc1")
     (cl:logandc2 "f_logand.htm#logandc2")
     (cl:logbitp "f_logbtp.htm#logbitp")
     (cl:logcount "f_logcou.htm#logcount")
     (cl:logeqv "f_logand.htm#logeqv")
     (cl:logical-pathname "a_logica.htm#logical-pathname")
     (cl:logical-pathname-translations 
      "f_logica.htm#logical-pathname-translations")
     (cl:logior "f_logand.htm#logior")
     (cl:lognand "f_logand.htm#lognand")
     (cl:lognor "f_logand.htm#lognor")
     (cl:lognot "f_logand.htm#lognot")
     (cl:logorc1 "f_logand.htm#logorc1")
     (cl:logorc2 "f_logand.htm#logorc2")
     (cl:logtest "f_logtes.htm#logtest")
     (cl:logxor "f_logand.htm#logxor")
     (cl:long-float "t_short_.htm#long-float")
     (cl:long-float-epsilon "v_short_.htm#long-float-epsilon")
     (cl:long-float-negative-epsilon 
      "v_short_.htm#long-float-negative-epsilon")
     (cl:long-site-name "f_short_.htm#long-site-name")
     (cl:loop "m_loop.htm#loop")
     (cl:loop-finish "m_loop_f.htm#loop-finish")
     (cl:lower-case-p "f_upper_.htm#lower-case-p")
     (cl:machine-instance "f_mach_i.htm#machine-instance")
     (cl:machine-type "f_mach_t.htm#machine-type")
     (cl:machine-version "f_mach_v.htm#machine-version")
     (cl:macro-function "f_macro_.htm#macro-function")
     (cl:macroexpand "f_mexp_.htm#macroexpand")
     (cl:macroexpand-1 "f_mexp_.htm#macroexpand-1")
     (cl:macrolet "s_flet_.htm#macrolet")
     (cl:make-array "f_mk_ar.htm#make-array")
     (cl:make-broadcast-stream "f_mk_bro.htm#make-broadcast-stream")
     (cl:make-concatenated-stream "f_mk_con.htm#make-concatenated-stream")
     (cl:make-condition "f_mk_cnd.htm#make-condition")
     (cl:make-dispatch-macro-character 
      "f_mk_dis.htm#make-dispatch-macro-character")
     (cl:make-echo-stream "f_mk_ech.htm#make-echo-stream")
     (cl:make-hash-table "f_mk_has.htm#make-hash-table")
     (cl:make-instance "f_mk_ins.htm#make-instance")
     (cl:make-instances-obsolete "f_mk_i_1.htm#make-instances-obsolete")
     (cl:make-list "f_mk_lis.htm#make-list")
     (cl:make-load-form "f_mk_ld_.htm#make-load-form")
     (cl:make-load-form-saving-slots 
      "f_mk_l_1.htm#make-load-form-saving-slots")
     (cl:make-method "m_call_m.htm#make-method")
     (cl:make-package "f_mk_pkg.htm#make-package")
     (cl:make-pathname "f_mk_pn.htm#make-pathname")
     (cl:make-random-state "f_mk_rnd.htm#make-random-state")
     (cl:make-sequence "f_mk_seq.htm#make-sequence")
     (cl:make-string "f_mk_stg.htm#make-string")
     (cl:make-string-input-stream "f_mk_s_1.htm#make-string-input-stream")
     (cl:make-string-output-stream "f_mk_s_2.htm#make-string-output-stream")
     (cl:make-symbol "f_mk_sym.htm#make-symbol")
     (cl:make-synonym-stream "f_mk_syn.htm#make-synonym-stream")
     (cl:make-two-way-stream "f_mk_two.htm#make-two-way-stream")
     (cl:makunbound "f_makunb.htm#makunbound")
     (cl:map "f_map.htm#map")
     (cl:map-into "f_map_in.htm#map-into")
     (cl:mapc "f_mapc_.htm#mapc")
     (cl:mapcan "f_mapc_.htm#mapcan")
     (cl:mapcar "f_mapc_.htm#mapcar")
     (cl:mapcon "f_mapc_.htm#mapcon")
     (cl:maphash "f_maphas.htm#maphash")
     (cl:mapl "f_mapc_.htm#mapl")
     (cl:maplist "f_mapc_.htm#maplist")
     (cl:mask-field "f_mask_f.htm#mask-field")
     (cl:max "f_max_m.htm#max")
     (cl:member "a_member.htm#member")
     (cl:member-if "f_mem_m.htm#member-if")
     (cl:member-if-not "f_mem_m.htm#member-if-not")
     (cl:merge "f_merge.htm#merge")
     (cl:merge-pathnames "f_merge_.htm#merge-pathnames")
     (cl:method "t_method.htm#method")
     (cl:method-combination "a_method.htm#method-combination")
     (cl:method-combination-error "f_meth_1.htm#method-combination-error")
     (cl:method-qualifiers "f_method.htm#method-qualifiers")
     (cl:min "f_max_m.htm#min")
     (cl:minusp "f_minusp.htm#minusp")
     (cl:mismatch "f_mismat.htm#mismatch")
     (cl:mod "a_mod.htm#mod")
     (cl:most-negative-double-float "v_most_1.htm#most-negative-double-float")
     (cl:most-negative-fixnum "v_most_p.htm#most-negative-fixnum")
     (cl:most-negative-long-float "v_most_1.htm#most-negative-long-float")
     (cl:most-negative-short-float "v_most_1.htm#most-negative-short-float")
     (cl:most-negative-single-float "v_most_1.htm#most-negative-single-float")
     (cl:most-positive-double-float "v_most_1.htm#most-positive-double-float")
     (cl:most-positive-fixnum "v_most_p.htm#most-positive-fixnum")
     (cl:most-positive-long-float "v_most_1.htm#most-positive-long-float")
     (cl:most-positive-short-float "v_most_1.htm#most-positive-short-float")
     (cl:most-positive-single-float "v_most_1.htm#most-positive-single-float")
     (cl:muffle-warning "a_muffle.htm#muffle-warning")
     (cl:multiple-value-bind "m_multip.htm#multiple-value-bind")
     (cl:multiple-value-call "s_multip.htm#multiple-value-call")
     (cl:multiple-value-list "m_mult_1.htm#multiple-value-list")
     (cl:multiple-value-prog1 "s_mult_1.htm#multiple-value-prog1")
     (cl:multiple-value-setq "m_mult_2.htm#multiple-value-setq")
     (cl:multiple-values-limit "v_multip.htm#multiple-values-limit")
     (cl:name-char "f_name_c.htm#name-char")
     (cl:namestring "f_namest.htm#namestring")
     (cl:nbutlast "f_butlas.htm#nbutlast")
     (cl:nconc "f_nconc.htm#nconc")
     (cl:next-method-p "f_next_m.htm#next-method-p")
     (cl:nil "a_nil.htm#nil")
     (cl:nintersection "f_isec_.htm#nintersection")
     (cl:ninth "f_firstc.htm#ninth")
     (cl:no-applicable-method "f_no_app.htm#no-applicable-method")
     (cl:no-next-method "f_no_nex.htm#no-next-method")
     (cl:not "a_not.htm#not")
     (cl:notany "f_everyc.htm#notany")
     (cl:notevery "f_everyc.htm#notevery")
     (cl:notinline "d_inline.htm#notinline")
     (cl:nreconc "f_revapp.htm#nreconc")
     (cl:nreverse "f_revers.htm#nreverse")
     (cl:nset-difference "f_set_di.htm#nset-difference")
     (cl:nset-exclusive-or "f_set_ex.htm#nset-exclusive-or")
     (cl:nstring-capitalize "f_stg_up.htm#nstring-capitalize")
     (cl:nstring-downcase "f_stg_up.htm#nstring-downcase")
     (cl:nstring-upcase "f_stg_up.htm#nstring-upcase")
     (cl:nsublis "f_sublis.htm#nsublis")
     (cl:nsubst "f_substc.htm#nsubst")
     (cl:nsubst-if "f_substc.htm#nsubst-if")
     (cl:nsubst-if-not "f_substc.htm#nsubst-if-not")
     (cl:nsubstitute "f_sbs_s.htm#nsubstitute")
     (cl:nsubstitute-if "f_sbs_s.htm#nsubstitute-if")
     (cl:nsubstitute-if-not "f_sbs_s.htm#nsubstitute-if-not")
     (cl:nth "f_nth.htm#nth")
     (cl:nth-value "m_nth_va.htm#nth-value")
     (cl:nthcdr "f_nthcdr.htm#nthcdr")
     (cl:null "a_null.htm#null")
     (cl:number "t_number.htm#number")
     (cl:numberp "f_nump.htm#numberp")
     (cl:numerator "f_numera.htm#numerator")
     (cl:nunion "f_unionc.htm#nunion")
     (cl:oddp "f_evenpc.htm#oddp")
     (cl:open "f_open.htm#open")
     (cl:open-stream-p "f_open_s.htm#open-stream-p")
     (cl:optimize "d_optimi.htm#optimize")
     (cl:or "a_or.htm#or")
     (cl:otherwise "m_case_.htm#otherwise")
     (cl:output-stream-p "f_in_stm.htm#output-stream-p")
     (cl:package "t_pkg.htm#package")
     (cl:package-error "e_pkg_er.htm#package-error")
     (cl:package-error-package "f_pkg_er.htm#package-error-package")
     (cl:package-name "f_pkg_na.htm#package-name")
     (cl:package-nicknames "f_pkg_ni.htm#package-nicknames")
     (cl:package-shadowing-symbols "f_pkg_sh.htm#package-shadowing-symbols")
     (cl:package-use-list "f_pkg_us.htm#package-use-list")
     (cl:package-used-by-list "f_pkg__1.htm#package-used-by-list")
     (cl:packagep "f_pkgp.htm#packagep")
     (cl:pairlis "f_pairli.htm#pairlis")
     (cl:parse-error "e_parse_.htm#parse-error")
     (cl:parse-integer "f_parse_.htm#parse-integer")
     (cl:parse-namestring "f_pars_1.htm#parse-namestring")
     (cl:pathname "a_pn.htm#pathname")
     (cl:pathname-device "f_pn_hos.htm#pathname-device")
     (cl:pathname-directory "f_pn_hos.htm#pathname-directory")
     (cl:pathname-host "f_pn_hos.htm#pathname-host")
     (cl:pathname-match-p "f_pn_mat.htm#pathname-match-p")
     (cl:pathname-name "f_pn_hos.htm#pathname-name")
     (cl:pathname-type "f_pn_hos.htm#pathname-type")
     (cl:pathname-version "f_pn_hos.htm#pathname-version")
     (cl:pathnamep "f_pnp.htm#pathnamep")
     (cl:peek-char "f_peek_c.htm#peek-char")
     (cl:phase "f_phase.htm#phase")
     (cl:pi "v_pi.htm#pi")
     (cl:plusp "f_minusp.htm#plusp")
     (cl:pop "m_pop.htm#pop")
     (cl:position "f_pos_p.htm#position")
     (cl:position-if "f_pos_p.htm#position-if")
     (cl:position-if-not "f_pos_p.htm#position-if-not")
     (cl:pprint "f_wr_pr.htm#pprint")
     (cl:pprint-dispatch "f_ppr_di.htm#pprint-dispatch")
     (cl:pprint-exit-if-list-exhausted 
      "m_ppr_ex.htm#pprint-exit-if-list-exhausted")
     (cl:pprint-fill "f_ppr_fi.htm#pprint-fill")
     (cl:pprint-indent "f_ppr_in.htm#pprint-indent")
     (cl:pprint-linear "f_ppr_fi.htm#pprint-linear")
     (cl:pprint-logical-block "m_ppr_lo.htm#pprint-logical-block")
     (cl:pprint-newline "f_ppr_nl.htm#pprint-newline")
     (cl:pprint-pop "m_ppr_po.htm#pprint-pop")
     (cl:pprint-tab "f_ppr_ta.htm#pprint-tab")
     (cl:pprint-tabular "f_ppr_fi.htm#pprint-tabular")
     (cl:prin1 "f_wr_pr.htm#prin1")
     (cl:prin1-to-string "f_wr_to_.htm#prin1-to-string")
     (cl:princ "f_wr_pr.htm#princ")
     (cl:princ-to-string "f_wr_to_.htm#princ-to-string")
     (cl:print "f_wr_pr.htm#print")
     (cl:print-not-readable "e_pr_not.htm#print-not-readable")
     (cl:print-not-readable-object "f_pr_not.htm#print-not-readable-object")
     (cl:print-object "f_pr_obj.htm#print-object")
     (cl:print-unreadable-object "m_pr_unr.htm#print-unreadable-object")
     (cl:probe-file "f_probe_.htm#probe-file")
     (cl:proclaim "f_procla.htm#proclaim")
     (cl:prog "m_prog_.htm#prog")
     (cl:prog* "m_prog_.htm#progST")
     (cl:prog1 "m_prog1c.htm#prog1")
     (cl:prog2 "m_prog1c.htm#prog2")
     (cl:progn "s_progn.htm#progn")
     (cl:program-error "e_progra.htm#program-error")
     (cl:progv "s_progv.htm#progv")
     (cl:provide "f_provid.htm#provide")
     (cl:psetf "m_setf_.htm#psetf")
     (cl:psetq "m_psetq.htm#psetq")
     (cl:push "m_push.htm#push")
     (cl:pushnew "m_pshnew.htm#pushnew")
     (cl:quote "s_quote.htm#quote")
     (cl:random "f_random.htm#random")
     (cl:random-state "t_rnd_st.htm#random-state")
     (cl:random-state-p "f_rnd_st.htm#random-state-p")
     (cl:rassoc "f_rassoc.htm#rassoc")
     (cl:rassoc-if "f_rassoc.htm#rassoc-if")
     (cl:rassoc-if-not "f_rassoc.htm#rassoc-if-not")
     (cl:ratio "t_ratio.htm#ratio")
     (cl:rational "a_ration.htm#rational")
     (cl:rationalize "f_ration.htm#rationalize")
     (cl:rationalp "f_rati_1.htm#rationalp")
     (cl:read "f_rd_rd.htm#read")
     (cl:read-byte "f_rd_by.htm#read-byte")
     (cl:read-char "f_rd_cha.htm#read-char")
     (cl:read-char-no-hang "f_rd_c_1.htm#read-char-no-hang")
     (cl:read-delimited-list "f_rd_del.htm#read-delimited-list")
     (cl:read-from-string "f_rd_fro.htm#read-from-string")
     (cl:read-line "f_rd_lin.htm#read-line")
     (cl:read-preserving-whitespace "f_rd_rd.htm#read-preserving-whitespace")
     (cl:read-sequence "f_rd_seq.htm#read-sequence")
     (cl:reader-error "e_rder_e.htm#reader-error")
     (cl:readtable "t_rdtabl.htm#readtable")
     (cl:readtable-case "f_rdtabl.htm#readtable-case")
     (cl:readtablep "f_rdta_1.htm#readtablep")
     (cl:real "t_real.htm#real")
     (cl:realp "f_realp.htm#realp")
     (cl:realpart "f_realpa.htm#realpart")
     (cl:reduce "f_reduce.htm#reduce")
     (cl:reinitialize-instance "f_reinit.htm#reinitialize-instance")
     (cl:rem "f_mod_r.htm#rem")
     (cl:remf "m_remf.htm#remf")
     (cl:remhash "f_remhas.htm#remhash")
     (cl:remove "f_rm_rm.htm#remove")
     (cl:remove-duplicates "f_rm_dup.htm#remove-duplicates")
     (cl:remove-if "f_rm_rm.htm#remove-if")
     (cl:remove-if-not "f_rm_rm.htm#remove-if-not")
     (cl:remove-method "f_rm_met.htm#remove-method")
     (cl:remprop "f_rempro.htm#remprop")
     (cl:rename-file "f_rn_fil.htm#rename-file")
     (cl:rename-package "f_rn_pkg.htm#rename-package")
     (cl:replace "f_replac.htm#replace")
     (cl:require "f_provid.htm#require")
     (cl:rest "f_rest.htm#rest")
     (cl:restart "t_rst.htm#restart")
     (cl:restart-bind "m_rst_bi.htm#restart-bind")
     (cl:restart-case "m_rst_ca.htm#restart-case")
     (cl:restart-name "f_rst_na.htm#restart-name")
     (cl:return "m_return.htm#return")
     (cl:return-from "s_ret_fr.htm#return-from")
     (cl:revappend "f_revapp.htm#revappend")
     (cl:reverse "f_revers.htm#reverse")
     (cl:room "f_room.htm#room")
     (cl:rotatef "m_rotate.htm#rotatef")
     (cl:round "f_floorc.htm#round")
     (cl:row-major-aref "f_row_ma.htm#row-major-aref")
     (cl:rplaca "f_rplaca.htm#rplaca")
     (cl:rplacd "f_rplaca.htm#rplacd")
     (cl:safety "d_optimi.htm#safety")
     (cl:satisfies "t_satisf.htm#satisfies")
     (cl:sbit "f_bt_sb.htm#sbit")
     (cl:scale-float "f_dec_fl.htm#scale-float")
     (cl:schar "f_char_.htm#schar")
     (cl:search "f_search.htm#search")
     (cl:second "f_firstc.htm#second")
     (cl:sequence "t_seq.htm#sequence")
     (cl:serious-condition "e_seriou.htm#serious-condition")
     (cl:set "f_set.htm#set")
     (cl:set-difference "f_set_di.htm#set-difference")
     (cl:set-dispatch-macro-character 
      "f_set__1.htm#set-dispatch-macro-character")
     (cl:set-exclusive-or "f_set_ex.htm#set-exclusive-or")
     (cl:set-macro-character "f_set_ma.htm#set-macro-character")
     (cl:set-pprint-dispatch "f_set_pp.htm#set-pprint-dispatch")
     (cl:set-syntax-from-char "f_set_sy.htm#set-syntax-from-char")
     (cl:setf "a_setf.htm#setf")
     (cl:setq "s_setq.htm#setq")
     (cl:seventh "f_firstc.htm#seventh")
     (cl:shadow "f_shadow.htm#shadow")
     (cl:shadowing-import "f_shdw_i.htm#shadowing-import")
     (cl:shared-initialize "f_shared.htm#shared-initialize")
     (cl:shiftf "m_shiftf.htm#shiftf")
     (cl:short-float "t_short_.htm#short-float")
     (cl:short-float-epsilon "v_short_.htm#short-float-epsilon")
     (cl:short-float-negative-epsilon 
      "v_short_.htm#short-float-negative-epsilon")
     (cl:short-site-name "f_short_.htm#short-site-name")
     (cl:signal "f_signal.htm#signal")
     (cl:signed-byte "t_sgn_by.htm#signed-byte")
     (cl:signum "f_signum.htm#signum")
     (cl:simple-array "t_smp_ar.htm#simple-array")
     (cl:simple-base-string "t_smp_ba.htm#simple-base-string")
     (cl:simple-bit-vector "t_smp_bt.htm#simple-bit-vector")
     (cl:simple-bit-vector-p "f_smp_bt.htm#simple-bit-vector-p")
     (cl:simple-condition "e_smp_cn.htm#simple-condition")
     (cl:simple-condition-format-arguments 
      "f_smp_cn.htm#simple-condition-format-arguments")
     (cl:simple-condition-format-control 
      "f_smp_cn.htm#simple-condition-format-control")
     (cl:simple-error "e_smp_er.htm#simple-error")
     (cl:simple-string "t_smp_st.htm#simple-string")
     (cl:simple-string-p "f_smp_st.htm#simple-string-p")
     (cl:simple-type-error "e_smp_tp.htm#simple-type-error")
     (cl:simple-vector "t_smp_ve.htm#simple-vector")
     (cl:simple-vector-p "f_smp_ve.htm#simple-vector-p")
     (cl:simple-warning "e_smp_wa.htm#simple-warning")
     (cl:sin "f_sin_c.htm#sin")
     (cl:single-float "t_short_.htm#single-float")
     (cl:single-float-epsilon "v_short_.htm#single-float-epsilon")
     (cl:single-float-negative-epsilon 
      "v_short_.htm#single-float-negative-epsilon")
     (cl:sinh "f_sinh_.htm#sinh")
     (cl:sixth "f_firstc.htm#sixth")
     (cl:sleep "f_sleep.htm#sleep")
     (cl:slot-boundp "f_slt_bo.htm#slot-boundp")
     (cl:slot-exists-p "f_slt_ex.htm#slot-exists-p")
     (cl:slot-makunbound "f_slt_ma.htm#slot-makunbound")
     (cl:slot-missing "f_slt_mi.htm#slot-missing")
     (cl:slot-unbound "f_slt_un.htm#slot-unbound")
     (cl:slot-value "f_slt_va.htm#slot-value")
     (cl:software-type "f_sw_tpc.htm#software-type")
     (cl:software-version "f_sw_tpc.htm#software-version")
     (cl:some "f_everyc.htm#some")
     (cl:sort "f_sort_.htm#sort")
     (cl:space "d_optimi.htm#space")
     (cl:special "d_specia.htm#special")
     (cl:special-operator-p "f_specia.htm#special-operator-p")
     (cl:speed "d_optimi.htm#speed")
     (cl:sqrt "f_sqrt_.htm#sqrt")
     (cl:stable-sort "f_sort_.htm#stable-sort")
     (cl:standard "07_ffb.htm#standard")
     (cl:standard-char "t_std_ch.htm#standard-char")
     (cl:standard-char-p "f_std_ch.htm#standard-char-p")
     (cl:standard-class "t_std_cl.htm#standard-class")
     (cl:standard-generic-function "t_std_ge.htm#standard-generic-function")
     (cl:standard-method "t_std_me.htm#standard-method")
     (cl:standard-object "t_std_ob.htm#standard-object")
     (cl:step "m_step.htm#step")
     (cl:storage-condition "e_storag.htm#storage-condition")
     (cl:store-value "a_store_.htm#store-value")
     (cl:stream "t_stream.htm#stream")
     (cl:stream-element-type "f_stm_el.htm#stream-element-type")
     (cl:stream-error "e_stm_er.htm#stream-error")
     (cl:stream-error-stream "f_stm_er.htm#stream-error-stream")
     (cl:stream-external-format "f_stm_ex.htm#stream-external-format")
     (cl:streamp "f_stmp.htm#streamp")
     (cl:string "a_string.htm#string")
     (cl:string-capitalize "f_stg_up.htm#string-capitalize")
     (cl:string-downcase "f_stg_up.htm#string-downcase")
     (cl:string-equal "f_stgeq_.htm#string-equal")
     (cl:string-greaterp "f_stgeq_.htm#string-greaterp")
     (cl:string-left-trim "f_stg_tr.htm#string-left-trim")
     (cl:string-lessp "f_stgeq_.htm#string-lessp")
     (cl:string-not-equal "f_stgeq_.htm#string-not-equal")
     (cl:string-not-greaterp "f_stgeq_.htm#string-not-greaterp")
     (cl:string-not-lessp "f_stgeq_.htm#string-not-lessp")
     (cl:string-right-trim "f_stg_tr.htm#string-right-trim")
     (cl:string-stream "t_stg_st.htm#string-stream")
     (cl:string-trim "f_stg_tr.htm#string-trim")
     (cl:string-upcase "f_stg_up.htm#string-upcase")
     (cl:string/= "f_stgeq_.htm#stringSLEQ")
     (cl:string< "f_stgeq_.htm#stringLT");
     (cl:string<= "f_stgeq_.htm#stringLTEQ");=
     (cl:string= "f_stgeq_.htm#stringEQ")
     (cl:string> "f_stgeq_.htm#stringGT");
     (cl:string>= "f_stgeq_.htm#stringGTEQ");=
     (cl:stringp "f_stgp.htm#stringp")
     (cl:structure "f_docume.htm#structure")
     (cl:structure-class "t_stu_cl.htm#structure-class")
     (cl:structure-object "t_stu_ob.htm#structure-object")
     (cl:style-warning "e_style_.htm#style-warning")
     (cl:sublis "f_sublis.htm#sublis")
     (cl:subseq "f_subseq.htm#subseq")
     (cl:subsetp "f_subset.htm#subsetp")
     (cl:subst "f_substc.htm#subst")
     (cl:subst-if "f_substc.htm#subst-if")
     (cl:subst-if-not "f_substc.htm#subst-if-not")
     (cl:substitute "f_sbs_s.htm#substitute")
     (cl:substitute-if "f_sbs_s.htm#substitute-if")
     (cl:substitute-if-not "f_sbs_s.htm#substitute-if-not")
     (cl:subtypep "f_subtpp.htm#subtypep")
     (cl:svref "f_svref.htm#svref")
     (cl:sxhash "f_sxhash.htm#sxhash")
     (cl:symbol "t_symbol.htm#symbol")
     (cl:symbol-function "f_symb_1.htm#symbol-function")
     (cl:symbol-macrolet "s_symbol.htm#symbol-macrolet")
     (cl:symbol-name "f_symb_2.htm#symbol-name")
     (cl:symbol-package "f_symb_3.htm#symbol-package")
     (cl:symbol-plist "f_symb_4.htm#symbol-plist")
     (cl:symbol-value "f_symb_5.htm#symbol-value")
     (cl:symbolp "f_symbol.htm#symbolp")
     (cl:synonym-stream "t_syn_st.htm#synonym-stream")
     (cl:synonym-stream-symbol "f_syn_st.htm#synonym-stream-symbol")
     (cl:t "a_t.htm#t")
     (cl:tagbody "s_tagbod.htm#tagbody")
     (cl:tailp "f_ldiffc.htm#tailp")
     (cl:tan "f_sin_c.htm#tan")
     (cl:tanh "f_sinh_.htm#tanh")
     (cl:tenth "f_firstc.htm#tenth")
     (cl:terpri "f_terpri.htm#terpri")
     (cl:the "s_the.htm#the")
     (cl:third "f_firstc.htm#third")
     (cl:throw "s_throw.htm#throw")
     (cl:time "m_time.htm#time")
     (cl:trace "m_tracec.htm#trace")
     (cl:translate-logical-pathname "f_tr_log.htm#translate-logical-pathname")
     (cl:translate-pathname "f_tr_pn.htm#translate-pathname")
     (cl:tree-equal "f_tree_e.htm#tree-equal")
     (cl:truename "f_tn.htm#truename")
     (cl:truncate "f_floorc.htm#truncate")
     (cl:two-way-stream "t_two_wa.htm#two-way-stream")
     (cl:two-way-stream-input-stream 
      "f_two_wa.htm#two-way-stream-input-stream")
     (cl:two-way-stream-output-stream 
      "f_two_wa.htm#two-way-stream-output-stream")
     (cl:type "a_type.htm#type")
     (cl:type-error "e_tp_err.htm#type-error")
     (cl:type-error-datum "f_tp_err.htm#type-error-datum")
     (cl:type-error-expected-type "f_tp_err.htm#type-error-expected-type")
     (cl:type-of "f_tp_of.htm#type-of")
     (cl:typecase "m_tpcase.htm#typecase")
     (cl:typep "f_typep.htm#typep")
     (cl:unbound-slot "e_unboun.htm#unbound-slot")
     (cl:unbound-slot-instance "f_unboun.htm#unbound-slot-instance")
     (cl:unbound-variable "e_unbo_1.htm#unbound-variable")
     (cl:undefined-function "e_undefi.htm#undefined-function")
     (cl:unexport "f_unexpo.htm#unexport")
     (cl:unintern "f_uninte.htm#unintern")
     (cl:union "f_unionc.htm#union")
     (cl:unless "m_when_.htm#unless")
     (cl:unread-char "f_unrd_c.htm#unread-char")
     (cl:unsigned-byte "t_unsgn_.htm#unsigned-byte")
     (cl:untrace "m_tracec.htm#untrace")
     (cl:unuse-package "f_unuse_.htm#unuse-package")
     (cl:unwind-protect "s_unwind.htm#unwind-protect")
     (cl:update-instance-for-different-class 
      "f_update.htm#update-instance-for-different-class")
     (cl:update-instance-for-redefined-class 
      "f_upda_1.htm#update-instance-for-redefined-class")
     (cl:upgraded-array-element-type 
      "f_upgr_1.htm#upgraded-array-element-type")
     (cl:upgraded-complex-part-type "f_upgrad.htm#upgraded-complex-part-type")
     (cl:upper-case-p "f_upper_.htm#upper-case-p")
     (cl:use-package "f_use_pk.htm#use-package")
     (cl:use-value "a_use_va.htm#use-value")
     (cl:user-homedir-pathname "f_user_h.htm#user-homedir-pathname")
     (cl:values "a_values.htm#values")
     (cl:values-list "f_vals_l.htm#values-list")
     (cl:variable "f_docume.htm#variable")
     (cl:vector "a_vector.htm#vector")
     (cl:vector-pop "f_vec_po.htm#vector-pop")
     (cl:vector-push "f_vec_ps.htm#vector-push")
     (cl:vector-push-extend "f_vec_ps.htm#vector-push-extend")
     (cl:vectorp "f_vecp.htm#vectorp")
     (cl:warn "f_warn.htm#warn")
     (cl:warning "e_warnin.htm#warning")
     (cl:when "m_when_.htm#when")
     (cl:wild-pathname-p "f_wild_p.htm#wild-pathname-p")
     (cl:with-accessors "m_w_acce.htm#with-accessors")
     (cl:with-compilation-unit "m_w_comp.htm#with-compilation-unit")
     (cl:with-condition-restarts "m_w_cnd_.htm#with-condition-restarts")
     (cl:with-hash-table-iterator "m_w_hash.htm#with-hash-table-iterator")
     (cl:with-input-from-string "m_w_in_f.htm#with-input-from-string")
     (cl:with-open-file "m_w_open.htm#with-open-file")
     (cl:with-open-stream "m_w_op_1.htm#with-open-stream")
     (cl:with-output-to-string "m_w_out_.htm#with-output-to-string")
     (cl:with-package-iterator "m_w_pkg_.htm#with-package-iterator")
     (cl:with-simple-restart "m_w_smp_.htm#with-simple-restart")
     (cl:with-slots "m_w_slts.htm#with-slots")
     (cl:with-standard-io-syntax "m_w_std_.htm#with-standard-io-syntax")
     (cl:write "f_wr_pr.htm#write")
     (cl:write-byte "f_wr_by.htm#write-byte")
     (cl:write-char "f_wr_cha.htm#write-char")
     (cl:write-line "f_wr_stg.htm#write-line")
     (cl:write-sequence "f_wr_seq.htm#write-sequence")
     (cl:write-string "f_wr_stg.htm#write-string")
     (cl:write-to-string "f_wr_to_.htm#write-to-string")
     (cl:y-or-n-p "f_y_or_n.htm#y-or-n-p")
     (cl:yes-or-no-p "f_y_or_n.htm#yes-or-no-p")
     (cl:zerop "f_zerop.htm#zerop")
     )
   :mode :two-element-list
   ))

(defun common-lisp-external-symbol-url (symbol)
  (unless (and (symbolp symbol) 
               (eq (symbol-package symbol) (find-package :common-lisp))
               (multiple-value-bind (s type)
                   (find-symbol (string symbol) :common-lisp)
                 (declare (ignore s))
                 (eq type :external)
                 ))
    (ierror "~S is not an external symbol of the Common Lisp package" symbol))
  (let ((url (gethash symbol *lisp-hyperspec-symbol-urls-table*)))
    (unless url (ierror "No entry for ~A in Common Lisp url hash table!"))
    (one-string wb::*common-lisp-external-symbol-urls-root* url)
    ))
      

(defparameter *ppcre-tentative-function-call-pattern*
  (ppcre:create-scanner 
   ;; Match a left paren, followed by anything other than a left paren,
   ;; followed by any number of anythings up to the next space, rparen or the
   ;; end of the line, doing it nongreedily so it matches at the first space.
   "\\([^\\(].*?(\\ |\\)|$)")
  "Line noise for the masses"
  )


(defun form-string-to-html-with-function-hyperlinks (fs)

  #.(one-string-nl
     "Take a string representing a lisp function definition, and write "
     "it out in html with hyperlinks for all function names we can find "
     "in function position that we know something about.")

  ;; Create a dummy package we can safely read symbols into.

  (unless (find-package :dummy) (make-package :dummy :use nil))

  ;; Break up the string into lines.

  (let ((form-lines (string-split fs #\Newline))
        (lisp-package (find-package :common-lisp))
        (dummy-package (find-package :dummy))
        (search-packages 
         (append (application-apropos-packages cl-user:*ai*)
                 (list :weblistener :cl-user :bbi))))

    (flet ((html-output-substring (s start end)
             (html (:princ-safe (subseq s start end))))
           (symbol-href (color line start url symbol-string ss end-char)
             (html
              (:princ-safe (subseq line start ss))
	      ((:a :href url)
	       ((:font :color color) 
		(:princ-safe symbol-string)))
               (:princ-safe (if end-char (string end-char) ""))
               )))

      ;; For each line, find all the candidate function calls

      (dolist (line form-lines)

	;; Need to put in :p for blank lines otherwise 
	;; IE (and others) lose the skips.

	(let ((matches 
               (ppcre:all-matches 
                *ppcre-tentative-function-call-pattern* line))
              (next-char-to-be-printed-index 0)
              (linelen (length line)))

          ;; For each candidate, grab the string that represents
          ;; the candidate.

          (loop for remaining-matches on matches by #'cddr do
                (let* ((start (first remaining-matches))
                       (end (second remaining-matches))
                       (end-char (if (= end linelen) nil (char line (1- end))))
                       ;; Match begins with a left paren
                       (symbol-start (1+ start))
                       ;; Match ends either with a space or the end of the line
                       (symbol-end (if end-char (1- end) end))
                       (symbol-string (subseq line symbol-start symbol-end))
                       (symbol nil))

                  ;; Read what should be a symbol

                  (with-standard-io-syntax
                    (let ((*package* dummy-package))
                      (handler-case
                          (setq symbol (read-from-string symbol-string))
                        (error () (setq symbol nil)))))

                  ;; See if we can find an fbound symbol with this name
                  ;; and unintern the symbol in DUMMY so it can be GC'ed.

                  (when (symbolp symbol)
                    (cond
                     ((not (eq dummy-package (symbol-package symbol))) nil)
                     (t
                      (let ((dummy-symbol symbol))
                        (setq symbol 
                              (find-an-fbound-symbol-named 
                               symbol search-packages))
                        (unintern dummy-symbol dummy-package)
                        ))))

                  ;; Output appropriate HTML based on what we've determined
                  ;; from the point of the end of the last match to the end
                  ;; of the current match.

                  (cond
                   ((or (null symbol) (not (symbolp symbol)))
                    ;; We didn't read it successfully, or what we
                    ;; read is not a symbol.  Don't try to hyperlink it.
                    (html-output-substring
                     line next-char-to-be-printed-index end))
                   ((eq lisp-package (symbol-package symbol))
                   ;; We read a symbol, and it is in the Lisp package
                    (let ((url (common-lisp-external-symbol-url symbol)))
                      (cond
                       ((null url)
                        (html-output-substring
                         line next-char-to-be-printed-index end))
                       (t 
                        (symbol-href :purple
                         line next-char-to-be-printed-index url symbol-string
                         symbol-start end-char)))))
                   ((fboundp symbol) 
                    ;; We read a symbol and it is in our tags table
                    ;;(setq *nc* next-char-to-be-printed-index)
		    (symbol-href :green
		     line next-char-to-be-printed-index
		     (forward-package-funcall 
                      :wb :function-source-url symbol) symbol-string 
		     symbol-start end-char 
		     ))
		   (t
                    ;; It's nothing we know anything about
                    ;; Should never get here now.
                    (html-output-substring
                     line next-char-to-be-printed-index end)))

                  (setq next-char-to-be-printed-index end)

                  ))

          ;; Print out anything after the last match on a line
          (unless (= linelen next-char-to-be-printed-index)
            (html-output-substring line next-char-to-be-printed-index linelen)
            ))

        ;; End of line.

	(if (zerop (length line)) (html :p)
	  (html :br))

        ))))
                 

(defun find-an-fbound-symbol-named (name &optional (packages nil))
  (find-a-symbol-named name :predicate 'fboundp :packages packages))
(defun find-a-bound-symbol-named (name &optional (packages nil))
  (find-a-symbol-named name :predicate 'boundp :packages packages))

(defun find-a-symbol-named (name &key (predicate 'identity) (packages nil))
  (setq name (string name))
  (when (null packages) (setq packages (list-all-packages)))
  (setq packages (mapcar 'find-package packages))
  (block exit
    (dolist (package packages)
      (when package 
        (let ((symbol (find-symbol name package)))
          (when (and symbol (funcall predicate symbol)) 
            (return-from exit symbol)))))
    nil
    ))
